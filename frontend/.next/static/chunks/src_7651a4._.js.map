{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,0KAAM,UAAU,MAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,0KAAM,UAAU,OAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,0KAAM,UAAU,OAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,0KAAM,UAAU,OAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,0KAAM,UAAU,OAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,0KAAM,UAAU,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/components/ui/select.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport * as SelectPrimitive from '@radix-ui/react-select';\nimport { Check, ChevronDown, ChevronUp } from 'lucide-react';\n\nimport { cn } from '@/lib/utils';\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      'flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',\n      className,\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      'flex cursor-default items-center justify-center py-1',\n      className,\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      'flex cursor-default items-center justify-center py-1',\n      className,\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = 'popper', ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',\n        position === 'popper' &&\n          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',\n        className,\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          'p-1',\n          position === 'popper' &&\n            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]',\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn('py-1.5 pl-8 pr-2 text-sm font-semibold', className)}\n    {...props}\n  />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',\n      className,\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn('-mx-1 my-1 h-px bg-muted', className)}\n    {...props}\n  />\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n};\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 319, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/components/ui/skeleton.tsx"],"sourcesContent":["import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }"],"names":[],"mappings":";;;;AAAA;;;AAEA,SAAS,SAAS,EAChB,SAAS,EACT,GAAG,OACkC;IACrC,qBACE,yMAAC;QACC,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EAAE,qCAAqC;QAClD,GAAG,KAAK;;;;;;AAGf;KAVS"}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/components/analytics/export-menu.tsx"],"sourcesContent":["'use client'\n\nimport React, { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport { useToast } from '@/hooks/use-toast'\nimport { Download, FileText, Printer, Loader2 } from 'lucide-react'\nimport { format } from 'date-fns'\n\nimport type { AnalyticsFilters } from '@/hooks/use-analytics-filters'\n\ninterface ExportMenuProps {\n  filters: AnalyticsFilters\n  className?: string\n  disabled?: boolean\n}\n\nexport function ExportMenu({ filters, className, disabled }: ExportMenuProps) {\n  const { toast } = useToast()\n  const [isExporting, setIsExporting] = useState<string | null>(null)\n\n  const formatDateForUrl = (date: Date) => {\n    return format(date, 'yyyy-MM-dd')\n  }\n\n  const buildExportParams = () => {\n    const params = new URLSearchParams()\n    \n    if (filters.scope === 'campaign' && filters.campaignId) {\n      params.set('scope', 'campaign')\n      params.set('campaignId', filters.campaignId)\n    } else {\n      params.set('scope', 'global')\n    }\n    \n    params.set('startDate', formatDateForUrl(filters.from))\n    params.set('endDate', formatDateForUrl(filters.to))\n    \n    if (filters.channels.length > 0) {\n      params.set('channels', filters.channels.join(','))\n    }\n    \n    params.set('includeTimeSeries', 'true')\n    params.set('timeZone', Intl.DateTimeFormat().resolvedOptions().timeZone)\n    \n    return params\n  }\n\n  const handleCsvExport = async () => {\n    setIsExporting('csv')\n    \n    try {\n      const params = buildExportParams()\n      const response = await fetch(`/api/analytics/export.csv?${params.toString()}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'text/csv',\n        },\n      })\n\n      if (!response.ok) {\n        throw new Error(`Export failed: ${response.status} ${response.statusText}`)\n      }\n\n      // Create download link\n      const blob = await response.blob()\n      const url = window.URL.createObjectURL(blob)\n      const link = document.createElement('a')\n      \n      // Generate filename with timestamp\n      const timestamp = format(new Date(), 'yyyy-MM-dd-HHmm')\n      const scope = filters.scope === 'campaign' ? `campaign-${filters.campaignId}` : 'global'\n      link.download = `analytics-${scope}-${timestamp}.csv`\n      \n      link.href = url\n      document.body.appendChild(link)\n      link.click()\n      document.body.removeChild(link)\n      window.URL.revokeObjectURL(url)\n\n      toast({\n        title: \"Export successful\",\n        description: \"Analytics data has been downloaded as CSV file.\",\n      })\n    } catch (error) {\n      console.error('CSV export failed:', error)\n      toast({\n        title: \"Export failed\",\n        description: \"Failed to export analytics data. Please try again.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsExporting(null)\n    }\n  }\n\n  const handlePdfExport = () => {\n    setIsExporting('pdf')\n    \n    try {\n      const params = buildExportParams()\n      \n      // Determine the correct print URL based on scope\n      const printUrl = filters.scope === 'campaign' && filters.campaignId\n        ? `/campaigns/${filters.campaignId}/analytics/print?${params.toString()}`\n        : `/analytics/print?${params.toString()}`\n      \n      // Open print page in new window\n      const printWindow = window.open(printUrl, '_blank', 'width=1200,height=800')\n      \n      if (!printWindow) {\n        throw new Error('Popup blocked - please allow popups for this site')\n      }\n\n      // Wait for the page to load, then trigger print dialog\n      printWindow.addEventListener('load', () => {\n        // Give components time to render\n        setTimeout(() => {\n          printWindow.print()\n        }, 2000)\n      })\n\n      toast({\n        title: \"Generating PDF\",\n        description: \"Print dialog will open when the report is ready.\",\n      })\n    } catch (error) {\n      console.error('PDF export failed:', error)\n      toast({\n        title: \"PDF export failed\",\n        description: \"Failed to open print dialog. Please check popup settings.\",\n        variant: \"destructive\",\n      })\n    } finally {\n      setIsExporting(null)\n    }\n  }\n\n  const isDisabled = disabled || isExporting !== null\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"outline\" \n          className={className}\n          disabled={isDisabled}\n        >\n          {isExporting ? (\n            <>\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n              Exporting...\n            </>\n          ) : (\n            <>\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export\n            </>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-48\">\n        <DropdownMenuItem \n          onClick={handleCsvExport}\n          disabled={isDisabled}\n          className=\"cursor-pointer\"\n        >\n          <FileText className=\"h-4 w-4 mr-2\" />\n          <div className=\"flex flex-col\">\n            <span>Download CSV</span>\n            <span className=\"text-xs text-muted-foreground\">\n              Spreadsheet data\n            </span>\n          </div>\n        </DropdownMenuItem>\n        \n        <DropdownMenuSeparator />\n        \n        <DropdownMenuItem \n          onClick={handlePdfExport}\n          disabled={isDisabled}\n          className=\"cursor-pointer\"\n        >\n          <Printer className=\"h-4 w-4 mr-2\" />\n          <div className=\"flex flex-col\">\n            <span>Print / Save PDF</span>\n            <span className=\"text-xs text-muted-foreground\">\n              Formatted report\n            </span>\n          </div>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 634, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 640, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/components/ui/tooltip.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }"],"names":[],"mappings":";;;;;;;AAEA;AAGA;AAFA;AAHA;;;;;AAOA,MAAM,kBAAkB,uKAAiB,QAAQ;AAEjD,MAAM,UAAU,uKAAiB,IAAI;AAErC,MAAM,iBAAiB,uKAAiB,OAAO;AAE/C,MAAM,+BAAiB,0KAAM,UAAU,MAGrC,CAAC,EAAE,SAAS,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO,EAAE,oBAC1C,yMAAC,uKAAiB,OAAO;QACvB,KAAK;QACL,YAAY;QACZ,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EACV,sYACA;QAED,GAAG,KAAK;;;;;;;AAGb,eAAe,WAAW,GAAG,uKAAiB,OAAO,CAAC,WAAW"}},
    {"offset": {"line": 677, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 683, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/components/analytics/kpi-card.tsx"],"sourcesContent":["'use client'\n\nimport { TrendingUp, TrendingDown, Minus } from 'lucide-react'\nimport { Card } from '@/components/ui/card'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport { Badge } from '@/components/ui/badge'\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'\nimport { cn } from '@/lib/utils'\n\nexport interface KpiCardProps {\n  label: string\n  value: string | number\n  deltaPct?: number\n  color: 'baseline' | 'conversion' | 'open' | 'click' | 'neutral'\n  tooltip?: string\n  icon?: React.ComponentType<{ className?: string }>\n  isLoading?: boolean\n  error?: boolean\n  subtitle?: string\n  formatter?: (value: number) => string\n  testId?: string\n}\n\nconst colorClasses = {\n  baseline: 'text-slate-700 bg-slate-50 border-slate-200',\n  conversion: 'text-emerald-700 bg-emerald-50 border-emerald-200',\n  open: 'text-blue-700 bg-blue-50 border-blue-200',\n  click: 'text-amber-700 bg-amber-50 border-amber-200',\n  neutral: 'text-gray-700 bg-gray-50 border-gray-200'\n}\n\nconst iconBgClasses = {\n  baseline: 'bg-slate-100 text-slate-600',\n  conversion: 'bg-emerald-100 text-emerald-600',\n  open: 'bg-blue-100 text-blue-600',\n  click: 'bg-amber-100 text-amber-600',\n  neutral: 'bg-gray-100 text-gray-600'\n}\n\nconst trendColors = {\n  positive: 'text-emerald-600 border-emerald-300 bg-emerald-50',\n  negative: 'text-red-600 border-red-300 bg-red-50',\n  neutral: 'text-gray-600 border-gray-300 bg-gray-50'\n}\n\nfunction formatNumber(value: string | number): string {\n  const num = typeof value === 'string' ? parseFloat(value) : value\n  \n  if (isNaN(num)) return value.toString()\n  \n  if (num >= 1000000) {\n    return `${(num / 1000000).toFixed(1)}M`\n  } else if (num >= 1000) {\n    return `${(num / 1000).toFixed(1)}K`\n  }\n  \n  return num.toLocaleString()\n}\n\nfunction getTrendDirection(deltaPct?: number): 'up' | 'down' | 'neutral' {\n  if (!deltaPct || deltaPct === 0) return 'neutral'\n  return deltaPct > 0 ? 'up' : 'down'\n}\n\nfunction getTrendColor(deltaPct?: number, isPositiveGood = true): 'positive' | 'negative' | 'neutral' {\n  if (!deltaPct || deltaPct === 0) return 'neutral'\n  \n  const isPositive = deltaPct > 0\n  if (isPositiveGood) {\n    return isPositive ? 'positive' : 'negative'\n  } else {\n    return isPositive ? 'negative' : 'positive'\n  }\n}\n\nexport function KpiCard({\n  label,\n  value,\n  deltaPct,\n  color,\n  tooltip,\n  icon: Icon,\n  isLoading = false,\n  error = false,\n  subtitle,\n  formatter,\n  testId\n}: KpiCardProps) {\n  if (isLoading) {\n    return (\n      <Card className=\"p-6\" data-testid={testId || `kpi-${label.replace(/\\s+/g, '-').toLowerCase()}-loading`}>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-2 flex-1\">\n              <Skeleton className=\"h-4 w-20\" />\n              <Skeleton className=\"h-8 w-16\" />\n            </div>\n            <Skeleton className=\"h-10 w-10 rounded-full\" />\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Skeleton className=\"h-3 w-12\" />\n            <Skeleton className=\"h-5 w-12 rounded-full\" />\n          </div>\n        </div>\n      </Card>\n    )\n  }\n\n  if (error) {\n    return (\n      <Card className=\"p-6 border-red-200 bg-red-50\" data-testid={testId || `kpi-${label.replace(/\\s+/g, '-').toLowerCase()}-error`}>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-2 flex-1\">\n              <p className=\"text-sm font-medium text-red-800\" role=\"alert\">{label}</p>\n              <p className=\"text-sm text-red-600\">Error loading data</p>\n            </div>\n            <div className=\"p-3 bg-red-100 rounded-full\">\n              <Minus className=\"h-4 w-4 text-red-600\" />\n            </div>\n          </div>\n        </div>\n      </Card>\n    )\n  }\n\n  const trendDirection = getTrendDirection(deltaPct)\n  const trendColor = getTrendColor(deltaPct)\n  const TrendIcon = trendDirection === 'up' ? TrendingUp : \n                   trendDirection === 'down' ? TrendingDown : Minus\n\n  const formattedValue = formatter ? formatter(Number(value)) : formatNumber(value)\n  const cardContent = (\n    <Card \n      className={cn(\n        \"p-6 transition-all hover:shadow-md\",\n        colorClasses[color]\n      )}\n      role=\"region\"\n      aria-label={`${label} metric`}\n      data-testid={testId || `kpi-${label.replace(/\\s+/g, '-').toLowerCase()}`}\n    >\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-2 flex-1\">\n            <p className=\"text-sm font-medium text-gray-700\" id={`label-${label.replace(/\\s+/g, '-').toLowerCase()}`}>\n              {label}\n            </p>\n            <p \n              className=\"text-2xl font-bold\"\n              aria-labelledby={`label-${label.replace(/\\s+/g, '-').toLowerCase()}`}\n            >\n              {formattedValue}\n            </p>\n          </div>\n          \n          {Icon && (\n            <div className={cn(\"p-3 rounded-full\", iconBgClasses[color])}>\n              <Icon className=\"h-5 w-5\" aria-hidden=\"true\" />\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          {subtitle && (\n            <p className=\"text-sm text-gray-500\">{subtitle}</p>\n          )}\n          \n          {deltaPct !== undefined && deltaPct !== null && (\n            <Badge \n              variant=\"outline\"\n              className={cn(\"text-xs px-2 py-1\", trendColors[trendColor])}\n              aria-label={`Trend: ${deltaPct > 0 ? 'increased' : 'decreased'} by ${Math.abs(deltaPct)}%`}\n            >\n              <TrendIcon className=\"h-3 w-3 mr-1\" aria-hidden=\"true\" />\n              {Math.abs(deltaPct).toFixed(1)}%\n            </Badge>\n          )}\n        </div>\n      </div>\n    </Card>\n  )\n\n  if (tooltip) {\n    return (\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            {cardContent}\n          </TooltipTrigger>\n          <TooltipContent>\n            <p>{tooltip}</p>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    )\n  }\n\n  return cardContent\n}\n\nexport function KpiCardGroup({ \n  children, \n  className \n}: { \n  children: React.ReactNode\n  className?: string \n}) {\n  return (\n    <div \n      className={cn(\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\", className)}\n      role=\"group\"\n      aria-label=\"Key performance indicators\"\n    >\n      {children}\n    </div>\n  )\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1065, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1071, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n        warning: \"border-orange-500/50 bg-orange-50 text-orange-800 dark:border-orange-500 dark:bg-orange-950 dark:text-orange-200 [&>svg]:text-orange-600\",\n        info: \"border-blue-500/50 bg-blue-50 text-blue-800 dark:border-blue-500 dark:bg-blue-950 dark:text-blue-200 [&>svg]:text-blue-600\",\n        success: \"border-green-500/50 bg-green-50 text-green-800 dark:border-green-500 dark:bg-green-950 dark:text-green-200 [&>svg]:text-green-600\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,+KAAA,CAAA,MAAG,AAAD,EACtB,2KACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SAAS;YACT,MAAM;YACN,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,MAAM,sBAAQ,0KAAM,UAAU,MAG5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,oBACnC,yMAAC;QACC,KAAK;QACL,MAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG;AAEpB,MAAM,2BAAa,0KAAM,UAAU,OAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EAAE,gDAAgD;QAC7D,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,iCAAmB,0KAAM,UAAU,OAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,iBAAiB,WAAW,GAAG"}},
    {"offset": {"line": 1145, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1151, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/lib/utils/ab-test-statistics.ts"],"sourcesContent":["/**\n * Statistical functions for A/B test analysis and significance testing\n */\n\n/**\n * A/B test variant data structure\n */\nexport interface AbVariant {\n  name: string\n  sent: number\n  delivered: number\n  opened: number\n  clicked: number\n  conversions?: number // Generic conversion metric\n  deliveryRate: number\n  openRate: number\n  clickRate: number\n  conversionRate?: number\n}\n\n/**\n * Statistical test result\n */\nexport interface StatisticalTest {\n  zScore: number\n  pValue: number\n  isSignificant: boolean\n  confidenceLevel: number\n  lift: number\n  liftPercentage: number\n}\n\n/**\n * A/B test comparison result\n */\nexport interface AbTestResult {\n  controlVariant: AbVariant\n  testVariant: AbVariant\n  deliveryTest: StatisticalTest\n  openRateTest: StatisticalTest\n  clickRateTest: StatisticalTest\n  conversionTest?: StatisticalTest\n  overallWinner: 'control' | 'test' | 'inconclusive'\n  primaryMetric: 'delivery' | 'openRate' | 'clickRate' | 'conversion'\n}\n\n/**\n * Standard normal cumulative distribution function (approximation)\n * Used to calculate p-values from z-scores\n */\nfunction standardNormalCDF(z: number): number {\n  // Abramowitz and Stegun approximation\n  const sign = z >= 0 ? 1 : -1\n  z = Math.abs(z)\n  \n  const a1 = 0.254829592\n  const a2 = -0.284496736\n  const a3 = 1.421413741\n  const a4 = -1.453152027\n  const a5 = 1.061405429\n  const p = 0.3275911\n  \n  const t = 1.0 / (1.0 + p * z)\n  const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-z * z)\n  \n  return 0.5 * (1.0 + sign * y)\n}\n\n/**\n * Compute two-proportion z-test for comparing conversion rates between variants\n * @param n1 Sample size for variant 1\n * @param c1 Conversions for variant 1\n * @param n2 Sample size for variant 2  \n * @param c2 Conversions for variant 2\n * @param confidenceLevel Confidence level (default 0.95 for 95%)\n * @returns Statistical test result\n */\nexport function computeTwoProportionZTest(\n  n1: number,\n  c1: number,\n  n2: number,\n  c2: number,\n  confidenceLevel: number = 0.95\n): StatisticalTest {\n  // Handle edge cases\n  if (n1 <= 0 || n2 <= 0) {\n    return {\n      zScore: 0,\n      pValue: 1,\n      isSignificant: false,\n      confidenceLevel,\n      lift: 0,\n      liftPercentage: 0\n    }\n  }\n\n  // Calculate proportions\n  const p1 = Math.max(0, Math.min(1, c1 / n1)) // Clamp to [0,1]\n  const p2 = Math.max(0, Math.min(1, c2 / n2)) // Clamp to [0,1]\n  \n  // Pooled proportion for null hypothesis\n  const pooledP = (c1 + c2) / (n1 + n2)\n  \n  // Standard error under null hypothesis\n  const standardError = Math.sqrt(pooledP * (1 - pooledP) * (1/n1 + 1/n2))\n  \n  // Avoid division by zero\n  if (standardError === 0) {\n    return {\n      zScore: 0,\n      pValue: 1,\n      isSignificant: false,\n      confidenceLevel,\n      lift: p2 - p1,\n      liftPercentage: p1 > 0 ? ((p2 - p1) / p1) * 100 : 0\n    }\n  }\n  \n  // Calculate z-score\n  const zScore = (p2 - p1) / standardError\n  \n  // Calculate two-tailed p-value\n  const pValue = 2 * (1 - standardNormalCDF(Math.abs(zScore)))\n  \n  // Determine significance\n  const alpha = 1 - confidenceLevel\n  const isSignificant = pValue < alpha\n  \n  // Calculate lift\n  const lift = p2 - p1\n  const liftPercentage = p1 > 0 ? ((p2 - p1) / p1) * 100 : 0\n  \n  return {\n    zScore,\n    pValue,\n    isSignificant,\n    confidenceLevel,\n    lift,\n    liftPercentage\n  }\n}\n\n/**\n * Perform comprehensive A/B test analysis\n * @param control Control variant data\n * @param test Test variant data\n * @param primaryMetric Primary metric to determine overall winner\n * @param confidenceLevel Confidence level for significance testing\n * @returns Complete A/B test analysis result\n */\nexport function analyzeAbTest(\n  control: AbVariant,\n  test: AbVariant,\n  primaryMetric: 'delivery' | 'openRate' | 'clickRate' | 'conversion' = 'clickRate',\n  confidenceLevel: number = 0.95\n): AbTestResult {\n  // Delivery rate test\n  const deliveryTest = computeTwoProportionZTest(\n    control.sent,\n    control.delivered,\n    test.sent,\n    test.delivered,\n    confidenceLevel\n  )\n  \n  // Open rate test (based on delivered messages)\n  const openRateTest = computeTwoProportionZTest(\n    control.delivered,\n    control.opened,\n    test.delivered,\n    test.opened,\n    confidenceLevel\n  )\n  \n  // Click rate test (based on delivered messages)\n  const clickRateTest = computeTwoProportionZTest(\n    control.delivered,\n    control.clicked,\n    test.delivered,\n    test.clicked,\n    confidenceLevel\n  )\n  \n  // Conversion test (if conversion data is available)\n  let conversionTest: StatisticalTest | undefined\n  if (control.conversions !== undefined && test.conversions !== undefined) {\n    conversionTest = computeTwoProportionZTest(\n      control.sent,\n      control.conversions,\n      test.sent,\n      test.conversions,\n      confidenceLevel\n    )\n  }\n  \n  // Determine overall winner based on primary metric\n  let overallWinner: 'control' | 'test' | 'inconclusive' = 'inconclusive'\n  \n  const primaryTest = {\n    delivery: deliveryTest,\n    openRate: openRateTest,\n    clickRate: clickRateTest,\n    conversion: conversionTest\n  }[primaryMetric]\n  \n  if (primaryTest && primaryTest.isSignificant) {\n    overallWinner = primaryTest.lift > 0 ? 'test' : 'control'\n  }\n  \n  return {\n    controlVariant: control,\n    testVariant: test,\n    deliveryTest,\n    openRateTest,\n    clickRateTest,\n    conversionTest,\n    overallWinner,\n    primaryMetric\n  }\n}\n\n/**\n * Calculate minimum sample size for detecting a given effect size\n * @param baseRate Current conversion rate (0-1)\n * @param minDetectableEffect Minimum effect size to detect (e.g., 0.1 for 10% relative improvement)\n * @param power Statistical power (default 0.8)\n * @param alpha Significance level (default 0.05)\n * @returns Minimum sample size per variant\n */\nexport function calculateMinimumSampleSize(\n  baseRate: number,\n  minDetectableEffect: number,\n  power: number = 0.8,\n  alpha: number = 0.05\n): number {\n  // Z-scores for alpha/2 and beta\n  const zAlpha = 1.96 // For alpha = 0.05 (two-tailed)\n  const zBeta = 0.84   // For power = 0.8\n  \n  const p1 = baseRate\n  const p2 = baseRate * (1 + minDetectableEffect)\n  \n  const pooledP = (p1 + p2) / 2\n  const numerator = (zAlpha * Math.sqrt(2 * pooledP * (1 - pooledP)) + \n                    zBeta * Math.sqrt(p1 * (1 - p1) + p2 * (1 - p2))) ** 2\n  const denominator = (p2 - p1) ** 2\n  \n  return Math.ceil(numerator / denominator)\n}\n\n/**\n * Format p-value for display\n */\nexport function formatPValue(pValue: number): string {\n  if (pValue < 0.001) {\n    return 'p < 0.001'\n  } else if (pValue < 0.01) {\n    return `p = ${pValue.toFixed(3)}`\n  } else if (pValue < 0.05) {\n    return `p = ${pValue.toFixed(3)}`\n  } else {\n    return `p = ${pValue.toFixed(2)}`\n  }\n}\n\n/**\n * Get significance level label\n */\nexport function getSignificanceLabel(pValue: number): {\n  level: 'highly-significant' | 'significant' | 'marginal' | 'not-significant'\n  label: string\n  color: string\n} {\n  if (pValue < 0.001) {\n    return {\n      level: 'highly-significant',\n      label: 'Highly Significant',\n      color: 'text-green-700 bg-green-50 border-green-200'\n    }\n  } else if (pValue < 0.01) {\n    return {\n      level: 'significant',\n      label: 'Very Significant',\n      color: 'text-green-600 bg-green-50 border-green-200'\n    }\n  } else if (pValue < 0.05) {\n    return {\n      level: 'significant',\n      label: 'Significant',\n      color: 'text-green-600 bg-green-50 border-green-200'\n    }\n  } else if (pValue < 0.1) {\n    return {\n      level: 'marginal',\n      label: 'Marginal',\n      color: 'text-yellow-600 bg-yellow-50 border-yellow-200'\n    }\n  } else {\n    return {\n      level: 'not-significant',\n      label: 'Not Significant',\n      color: 'text-gray-600 bg-gray-50 border-gray-200'\n    }\n  }\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1324, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1330, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/components/analytics/ab-test-bar-chart.tsx"],"sourcesContent":["'use client'\n\nimport React, { useMemo } from 'react'\nimport { Bar } from 'react-chartjs-2'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  TooltipItem\n} from 'chart.js'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { AlertCircle, RefreshCw, BarChart3 } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { cn } from '@/lib/utils'\nimport {\n  analyzeAbTest,\n  formatPValue,\n  getSignificanceLabel,\n  type AbVariant,\n  type AbTestResult\n} from '@/lib/utils/ab-test-statistics'\n\n// Register Chart.js components\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend)\n\ninterface AbTestBarChartProps {\n  variants: AbVariant[]\n  primaryMetric?: 'delivery' | 'openRate' | 'clickRate' | 'conversion'\n  metric?: 'all' | 'delivery' | 'openRate' | 'clickRate' | 'conversion'\n  showLift?: boolean\n  height?: number\n  isLoading?: boolean\n  error?: Error | null\n  onRefresh?: () => void\n  className?: string\n}\n\n// Colorblind-safe palette optimized for data visualization\nconst COLORBLIND_SAFE_COLORS = {\n  primary: '#2563EB',     // blue - control\n  success: '#059669',     // green - positive lift  \n  warning: '#D97706',     // orange - negative lift\n  neutral: '#6B7280',     // gray - neutral\n  accent: '#7C3AED'       // purple - highlight\n}\n\nconst METRIC_COLORS = {\n  delivery: COLORBLIND_SAFE_COLORS.primary,\n  openRate: COLORBLIND_SAFE_COLORS.success, \n  clickRate: COLORBLIND_SAFE_COLORS.accent,\n  conversion: COLORBLIND_SAFE_COLORS.warning\n}\n\nexport function AbTestBarChart({ \n  variants, \n  primaryMetric = 'clickRate',\n  metric = 'all',\n  showLift = true,\n  height = 400,\n  isLoading, \n  error, \n  onRefresh,\n  className \n}: AbTestBarChartProps) {\n  const chartData = useMemo(() => {\n    if (!variants || variants.length < 2) return null\n\n    const [control, ...testVariants] = variants\n    const analyses = testVariants.map(test => \n      analyzeAbTest(control, test, primaryMetric)\n    )\n\n    // Determine which metrics to show\n    const metricsToShow = metric === 'all' \n      ? ['delivery', 'openRate', 'clickRate'] \n      : [metric]\n\n    const labels = variants.map(v => v.name)\n\n    const datasets = metricsToShow.map((metricKey) => {\n      const metricName = {\n        delivery: 'Delivery Rate',\n        openRate: 'Open Rate', \n        clickRate: 'Click Rate',\n        conversion: 'Conversion Rate'\n      }[metricKey]\n\n      const data = variants.map(variant => {\n        const rate = variant[`${metricKey}Rate` as keyof AbVariant] as number\n        return showLift ? rate * 100 : rate * 100 // Show as percentage\n      })\n\n      return {\n        label: metricName,\n        data,\n        backgroundColor: variants.map((variant, index) => {\n          const baseColor = METRIC_COLORS[metricKey as keyof typeof METRIC_COLORS]\n          \n          if (index === 0) {\n            // Control variant - use base color\n            return baseColor + '90' // 90% opacity\n          }\n\n          // Test variant - check if it's a winner\n          const analysis = analyses[index - 1]\n          const metricTest = analysis[`${metricKey}Test` as keyof AbTestResult] as any\n          \n          if (metricTest?.isSignificant) {\n            return metricTest.lift > 0 \n              ? COLORBLIND_SAFE_COLORS.success + '90'  // Winner - green\n              : COLORBLIND_SAFE_COLORS.warning + '90'  // Loser - orange\n          }\n          \n          return baseColor + '60' // Not significant - muted\n        }),\n        borderColor: variants.map((variant, index) => {\n          const baseColor = METRIC_COLORS[metricKey as keyof typeof METRIC_COLORS]\n          \n          if (index === 0) {\n            return baseColor\n          }\n\n          const analysis = analyses[index - 1]\n          const metricTest = analysis[`${metricKey}Test` as keyof AbTestResult] as any\n          \n          if (metricTest?.isSignificant) {\n            return metricTest.lift > 0 \n              ? COLORBLIND_SAFE_COLORS.success \n              : COLORBLIND_SAFE_COLORS.warning\n          }\n          \n          return baseColor\n        }),\n        borderWidth: 2,\n        borderRadius: 4,\n        borderSkipped: false\n      }\n    })\n\n    return { labels, datasets }\n  }, [variants, primaryMetric, metric, showLift])\n\n  const chartOptions = useMemo(() => ({\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n        labels: {\n          boxWidth: 12,\n          boxHeight: 12,\n          usePointStyle: true,\n          padding: 20,\n          font: {\n            size: 12,\n            weight: 'normal' as const\n          }\n        }\n      },\n      title: {\n        display: true,\n        text: metric === 'all' ? 'A/B Test Performance Comparison' : \n              `${metric.charAt(0).toUpperCase() + metric.slice(1)} Rate Comparison`,\n        font: {\n          size: 16,\n          weight: 'bold' as const\n        },\n        padding: {\n          bottom: 20\n        }\n      },\n      tooltip: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        titleColor: '#ffffff',\n        bodyColor: '#ffffff',\n        borderColor: 'rgba(255, 255, 255, 0.1)',\n        borderWidth: 1,\n        cornerRadius: 8,\n        displayColors: true,\n        callbacks: {\n          afterLabel: (context: TooltipItem<'bar'>) => {\n            const variantIndex = context.dataIndex\n            const datasetIndex = context.datasetIndex\n            \n            if (variantIndex === 0) {\n              return 'Control (Baseline)'\n            }\n\n            const metricKey = metric === 'all' \n              ? ['delivery', 'openRate', 'clickRate'][datasetIndex]\n              : metric\n\n            const testVariantIndex = variantIndex - 1\n            const analyses = variants.slice(1).map(test => \n              analyzeAbTest(variants[0], test, primaryMetric)\n            )\n            \n            if (analyses[testVariantIndex]) {\n              const analysis = analyses[testVariantIndex]\n              const metricTest = analysis[`${metricKey}Test` as keyof AbTestResult] as any\n              \n              if (metricTest) {\n                const lift = metricTest.liftPercentage.toFixed(1)\n                const pValue = formatPValue(metricTest.pValue)\n                const significance = metricTest.isSignificant ? '✓ Significant' : '✗ Not Significant'\n                \n                return [\n                  `Lift: ${lift >= 0 ? '+' : ''}${lift}%`,\n                  `P-value: ${pValue}`,\n                  significance\n                ]\n              }\n            }\n            \n            return ''\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        grid: {\n          display: false\n        },\n        ticks: {\n          font: {\n            size: 11,\n            weight: 'normal' as const\n          }\n        }\n      },\n      y: {\n        beginAtZero: true,\n        max: showLift ? 100 : undefined,\n        grid: {\n          color: 'rgba(0, 0, 0, 0.1)'\n        },\n        ticks: {\n          font: {\n            size: 11\n          },\n          callback: function(value: any) {\n            return `${value}%`\n          }\n        },\n        title: {\n          display: true,\n          text: 'Rate (%)',\n          font: {\n            size: 12,\n            weight: 'normal' as const\n          }\n        }\n      }\n    },\n    interaction: {\n      intersect: false,\n      mode: 'index' as const\n    },\n    animation: {\n      duration: 750,\n      easing: 'easeInOutCubic' as const\n    }\n  }), [metric, showLift, primaryMetric, variants])\n\n  if (isLoading) {\n    return (\n      <div className={cn(\"space-y-4\", className)}>\n        <div className=\"flex items-center justify-center\" style={{ height: `${height}px` }}>\n          <Skeleton className=\"w-full h-full rounded-lg\" />\n        </div>\n        <div className=\"flex justify-center space-x-4\">\n          <Skeleton className=\"h-4 w-20\" />\n          <Skeleton className=\"h-4 w-24\" />\n          <Skeleton className=\"h-4 w-18\" />\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <Alert className={cn(\"border-red-200\", className)}>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription className=\"flex items-center justify-between\">\n          <span>Failed to load A/B test data</span>\n          {onRefresh && (\n            <Button variant=\"outline\" size=\"sm\" onClick={onRefresh} className=\"ml-2\">\n              <RefreshCw className=\"h-3 w-3 mr-1\" />\n              Retry\n            </Button>\n          )}\n        </AlertDescription>\n      </Alert>\n    )\n  }\n\n  if (!variants || variants.length < 2) {\n    return (\n      <div className={cn(\"flex items-center justify-center text-muted-foreground\", className)} \n           style={{ height: `${height}px` }}>\n        <div className=\"text-center\">\n          <BarChart3 className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n          <p className=\"text-lg font-medium\">No A/B test data available</p>\n          <p className=\"text-sm\">Need at least 2 variants to compare</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (!chartData) {\n    return null\n  }\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      <div style={{ height: `${height}px` }} className=\"relative\" role=\"img\" aria-label=\"A/B test performance bar chart showing conversion rates and statistical significance\">\n        <Bar data={chartData} options={chartOptions} />\n      </div>\n      \n      {/* Legend for significance indicators */}\n      <div className=\"flex flex-wrap justify-center gap-4 text-sm text-muted-foreground\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-3 h-3 rounded-sm\" style={{ backgroundColor: COLORBLIND_SAFE_COLORS.success + '90' }} />\n          <span>Significant Winner</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-3 h-3 rounded-sm\" style={{ backgroundColor: COLORBLIND_SAFE_COLORS.warning + '90' }} />\n          <span>Significant Loser</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-3 h-3 rounded-sm\" style={{ backgroundColor: COLORBLIND_SAFE_COLORS.neutral + '60' }} />\n          <span>Not Significant</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-3 h-3 rounded-sm\" style={{ backgroundColor: COLORBLIND_SAFE_COLORS.primary + '90' }} />\n          <span>Control Baseline</span>\n        </div>\n      </div>\n    </div>\n  )\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1898, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1904, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,0KAAM,UAAU,MAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC;QAAI,WAAU;kBACb,cAAA,yMAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,0KAAM,UAAU,OAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,0KAAM,UAAU,OAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,0KAAM,UAAU,OAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,0KAAM,UAAU,OAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,0KAAM,UAAU,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,0KAAM,UAAU,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,0KAAM,UAAU,QAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;;AAGb,aAAa,WAAW,GAAG"}},
    {"offset": {"line": 2036, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2042, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/components/analytics/ab-variant-table.tsx"],"sourcesContent":["'use client'\n\nimport React from 'react'\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { AlertCircle, TrendingUp, TrendingDown, Minus, Info, RefreshCw } from 'lucide-react'\nimport { cn } from '@/lib/utils'\nimport {\n  analyzeAbTest,\n  formatPValue,\n  getSignificanceLabel,\n  type AbVariant,\n  type AbTestResult\n} from '@/lib/utils/ab-test-statistics'\n\ninterface AbVariantTableProps {\n  variants: AbVariant[]\n  primaryMetric?: 'delivery' | 'openRate' | 'clickRate' | 'conversion'\n  isLoading?: boolean\n  error?: Error | null\n  onRefresh?: () => void\n  className?: string\n}\n\ninterface MetricCellProps {\n  value: number\n  format: 'number' | 'percentage'\n  comparison?: {\n    baseline: number\n    lift: number\n    liftPercentage: number\n    isSignificant: boolean\n    pValue: number\n  }\n}\n\nfunction MetricCell({ value, format, comparison }: MetricCellProps) {\n  const formattedValue = format === 'percentage' \n    ? `${(value * 100).toFixed(1)}%`\n    : value.toLocaleString()\n\n  if (!comparison) {\n    return <span className=\"font-mono text-sm\">{formattedValue}</span>\n  }\n\n  const { lift, liftPercentage, isSignificant, pValue } = comparison\n  const isPositive = lift > 0\n  const Icon = isPositive ? TrendingUp : lift < 0 ? TrendingDown : Minus\n  const significance = getSignificanceLabel(pValue)\n\n  return (\n    <div className=\"space-y-1\">\n      <span className=\"font-mono text-sm\">{formattedValue}</span>\n      <div className=\"flex items-center gap-2\">\n        <div className={cn(\n          \"flex items-center gap-1 text-xs\",\n          isPositive ? \"text-green-600\" : lift < 0 ? \"text-red-600\" : \"text-gray-500\"\n        )}>\n          <Icon className=\"h-3 w-3\" />\n          <span>\n            {format === 'percentage' \n              ? `${liftPercentage >= 0 ? '+' : ''}${liftPercentage.toFixed(1)}%`\n              : `${lift >= 0 ? '+' : ''}${lift.toLocaleString()}`\n            }\n          </span>\n        </div>\n        {isSignificant && (\n          <Badge variant=\"outline\" className={cn(\"text-xs px-1 py-0\", significance.color)} aria-label={`Statistically significant with p-value ${formatPValue(pValue)}`}>\n            ✓\n            <span className=\"sr-only\">Statistically significant</span>\n          </Badge>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport function AbVariantTable({ \n  variants, \n  primaryMetric = 'clickRate', \n  isLoading, \n  error, \n  onRefresh,\n  className \n}: AbVariantTableProps) {\n  if (isLoading) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Skeleton className=\"h-5 w-5\" />\n            <Skeleton className=\"h-6 w-32\" />\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <div key={i} className=\"flex justify-between\">\n                <Skeleton className=\"h-4 w-24\" />\n                <Skeleton className=\"h-4 w-20\" />\n                <Skeleton className=\"h-4 w-20\" />\n                <Skeleton className=\"h-4 w-20\" />\n                <Skeleton className=\"h-4 w-20\" />\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (error) {\n    return (\n      <Card className={cn(\"border-red-200\", className)}>\n        <CardContent className=\"p-6\">\n          <Alert className=\"border-red-200\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription className=\"flex items-center justify-between\">\n              <span>Failed to load A/B test data</span>\n              {onRefresh && (\n                <Button variant=\"outline\" size=\"sm\" onClick={onRefresh} className=\"ml-2\">\n                  <RefreshCw className=\"h-3 w-3 mr-1\" />\n                  Retry\n                </Button>\n              )}\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (!variants || variants.length < 2) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"p-8 text-center text-muted-foreground\">\n          <Info className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n          <p className=\"text-lg font-medium\">No A/B test data available</p>\n          <p className=\"text-sm\">Need at least 2 variants to compare</p>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  // Assume first variant is control, others are test variants\n  const [control, ...testVariants] = variants\n  \n  // Analyze each test variant against control\n  const analyses = testVariants.map(test => \n    analyzeAbTest(control, test, primaryMetric)\n  )\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-5 h-5 bg-blue-100 rounded flex items-center justify-center\">\n              <span className=\"text-blue-600 text-xs font-bold\">AB</span>\n            </div>\n            <span>Variant Performance Comparison</span>\n          </div>\n          <Badge variant=\"outline\" className=\"capitalize\">\n            Primary: {primaryMetric.replace(/([A-Z])/g, ' $1').toLowerCase()}\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {/* Comparison Table */}\n          <div className=\"rounded-md border\">\n            <Table role=\"table\" aria-label=\"A/B test variant performance comparison table\">\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-32\">Variant</TableHead>\n                  <TableHead className=\"text-center\">Messages Sent</TableHead>\n                  <TableHead className=\"text-center\">Delivery Rate</TableHead>\n                  <TableHead className=\"text-center\">Open Rate</TableHead>\n                  <TableHead className=\"text-center\">Click Rate</TableHead>\n                  <TableHead className=\"text-center\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {/* Control Row */}\n                <TableRow className=\"bg-muted/50\">\n                  <TableCell>\n                    <div>\n                      <span className=\"font-medium\">{control.name}</span>\n                      <Badge variant=\"outline\" className=\"ml-2 text-xs\">Control</Badge>\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-center\">\n                    <MetricCell value={control.sent} format=\"number\" />\n                  </TableCell>\n                  <TableCell className=\"text-center\">\n                    <MetricCell value={control.deliveryRate} format=\"percentage\" />\n                  </TableCell>\n                  <TableCell className=\"text-center\">\n                    <MetricCell value={control.openRate} format=\"percentage\" />\n                  </TableCell>\n                  <TableCell className=\"text-center\">\n                    <MetricCell value={control.clickRate} format=\"percentage\" />\n                  </TableCell>\n                  <TableCell className=\"text-center\">\n                    <span className=\"text-sm text-muted-foreground\">Baseline</span>\n                  </TableCell>\n                </TableRow>\n\n                {/* Test Variant Rows */}\n                {testVariants.map((variant, index) => {\n                  const analysis = analyses[index]\n                  const isWinner = analysis.overallWinner === 'test'\n                  \n                  return (\n                    <TableRow key={variant.name} className={cn(\n                      isWinner && \"bg-green-50\"\n                    )}>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-medium\">{variant.name}</span>\n                          {isWinner && (\n                            <Badge variant=\"outline\" className=\"text-green-600 border-green-300 text-xs\">\n                              Winner\n                            </Badge>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <MetricCell value={variant.sent} format=\"number\" />\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <MetricCell \n                          value={variant.deliveryRate} \n                          format=\"percentage\"\n                          comparison={{\n                            baseline: control.deliveryRate,\n                            lift: analysis.deliveryTest.lift,\n                            liftPercentage: analysis.deliveryTest.liftPercentage,\n                            isSignificant: analysis.deliveryTest.isSignificant,\n                            pValue: analysis.deliveryTest.pValue\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <MetricCell \n                          value={variant.openRate} \n                          format=\"percentage\"\n                          comparison={{\n                            baseline: control.openRate,\n                            lift: analysis.openRateTest.lift,\n                            liftPercentage: analysis.openRateTest.liftPercentage,\n                            isSignificant: analysis.openRateTest.isSignificant,\n                            pValue: analysis.openRateTest.pValue\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <MetricCell \n                          value={variant.clickRate} \n                          format=\"percentage\"\n                          comparison={{\n                            baseline: control.clickRate,\n                            lift: analysis.clickRateTest.lift,\n                            liftPercentage: analysis.clickRateTest.liftPercentage,\n                            isSignificant: analysis.clickRateTest.isSignificant,\n                            pValue: analysis.clickRateTest.pValue\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell className=\"text-center\">\n                        <div className=\"text-xs space-y-1\">\n                          {Object.entries({\n                            'Delivery': analysis.deliveryTest,\n                            'Open': analysis.openRateTest,\n                            'Click': analysis.clickRateTest\n                          }).map(([key, test]) => (\n                            <div key={key} className=\"flex items-center gap-1 justify-center\">\n                              <span className=\"w-12 text-left\">{key}:</span>\n                              <span className=\"font-mono\">{formatPValue(test.pValue)}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  )\n                })}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Statistical Disclaimer */}\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <div className=\"flex items-start gap-3\">\n              <Info className=\"h-5 w-5 text-blue-600 mt-0.5 flex-shrink-0\" />\n              <div className=\"text-sm text-blue-700\">\n                <p className=\"font-medium mb-1\">Statistical Analysis Notes</p>\n                <ul className=\"space-y-1 text-xs\">\n                  <li>• Significance testing uses two-proportion z-test (p &lt; 0.05)</li>\n                  <li>• ✓ indicates statistically significant difference</li>\n                  <li>• Results are heuristic; consider practical significance and sample size</li>\n                  <li>• Run tests longer for more reliable results</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2912, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2918, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/components/ui/progress.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }"],"names":[],"mappings":";;;;AAEA;AAGA;AAFA;AAHA;;;;;AAOA,MAAM,yBAAW,0KAAM,UAAU,MAG/B,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,OAAO,EAAE,oBACjC,yMAAC,wKAAkB,IAAI;QACrB,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EACV,iEACA;QAED,GAAG,KAAK;kBAET,cAAA,yMAAC,wKAAkB,SAAS;YAC1B,WAAU;YACV,OAAO;gBAAE,WAAW,CAAC,YAAY,EAAE,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC;YAAC;;;;;;;;;;;;AAIhE,SAAS,WAAW,GAAG,wKAAkB,IAAI,CAAC,WAAW"}},
    {"offset": {"line": 2958, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2964, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }"],"names":[],"mappings":";;;;;;;AAEA;AAGA;AAFA;AAHA;;;;;AAOA,MAAM,OAAO,oKAAc,IAAI;AAE/B,MAAM,yBAAW,0KAAM,UAAU,MAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC,oKAAc,IAAI;QACjB,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EACV,8FACA;QAED,GAAG,KAAK;;;;;;;AAGb,SAAS,WAAW,GAAG,oKAAc,IAAI,CAAC,WAAW;AAErD,MAAM,4BAAc,0KAAM,UAAU,OAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC,oKAAc,OAAO;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EACV,uYACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,oKAAc,OAAO,CAAC,WAAW;AAE3D,MAAM,4BAAc,0KAAM,UAAU,OAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,yMAAC,oKAAc,OAAO;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,kIAAA,CAAA,KAAE,AAAD,EACV,mIACA;QAED,GAAG,KAAK;;;;;;;AAGb,YAAY,WAAW,GAAG,oKAAc,OAAO,CAAC,WAAW"}},
    {"offset": {"line": 3024, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3030, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/hooks/use-analytics-api.ts"],"sourcesContent":["'use client'\n\nimport { useQuery, useQueryClient } from '@tanstack/react-query'\nimport axios from 'axios'\nimport type { AnalyticsFilters } from './use-analytics-filters'\n\n// Types for API responses\nexport interface AnalyticsKpi {\n  sent: number\n  delivered: number\n  opened: number\n  clicked: number\n  failed: number\n  unsubscribed: number\n  bounced: number\n  spamReports: number\n  totalCost: number\n  uniqueCampaigns: number\n  uniqueContacts: number\n}\n\nexport interface AnalyticsRates {\n  deliveryRate: number\n  openRate: number\n  clickRate: number\n  clickThroughRate: number\n  failureRate: number\n  unsubscribeRate: number\n  bounceRate: number\n  spamRate: number\n}\n\nexport interface ChannelBreakdown {\n  channel: string\n  sent: number\n  delivered: number\n  opened: number\n  clicked: number\n  failed: number\n  cost: number\n  deliveryRate: number\n  openRate: number\n  clickRate: number\n}\n\nexport interface AnalyticsSummaryResponse {\n  scope: string\n  campaignId?: string\n  from: string\n  to: string\n  kpi: AnalyticsKpi\n  rates: AnalyticsRates\n  channelBreakdowns: ChannelBreakdown[]\n  failureBreakdowns: Array<{\n    failureCode?: string\n    failureReason?: string\n    count: number\n    percentage: number\n  }>\n}\n\nexport interface TimeBucket {\n  timestamp: string\n  label: string\n  sent: number\n  delivered: number\n  opened: number\n  clicked: number\n  failed: number\n  unsubscribed: number\n  bounced: number\n  spamReports: number\n  totalCost: number\n  deliveryRate: number\n  openRate: number\n  clickRate: number\n}\n\nexport interface ChartDataset {\n  label: string\n  data: number[]\n  borderColor: string\n  backgroundColor: string\n  fill: boolean\n  tension: number\n  borderWidth: number\n}\n\nexport interface TimeSeriesResponse {\n  scope: string\n  campaignId?: string\n  from: string\n  to: string\n  interval: string\n  timeZone: string\n  datasets: ChartDataset[]\n  buckets: TimeBucket[]\n  metadata: {\n    totalBuckets: number\n    emptyBuckets: number\n    actualStart: string\n    actualEnd: string\n    eventTypes: string[]\n    channels: string[]\n  }\n}\n\nexport interface FunnelStage {\n  name: string\n  displayName: string\n  count: number\n  conversionRate: number\n  absoluteRate: number\n  dropOffRate: number\n  dropOffCount: number\n  order: number\n  color: string\n  width: number\n}\n\nexport interface FunnelResponse {\n  scope: string\n  campaignId?: string\n  from: string\n  to: string\n  conversionModel: string\n  stages: FunnelStage[]\n  channelFunnels: Array<{\n    channel: string\n    stages: FunnelStage[]\n    overallConversionRate: number\n    bestStage: string\n    worstStage: string\n  }>\n  insights: {\n    biggestDropOff: string\n    biggestDropOffRate: number\n    biggestDropOffCount: number\n    bestPerformingChannel: string\n    bestChannelConversionRate: number\n    overallConversionRate: number\n    deliveryEfficiency: number\n    engagementRate: number\n    recommendations: string[]\n  }\n}\n\nexport interface CostQuotaResponse {\n  scope: string\n  campaignId?: string\n  month: number\n  year: number\n  totalCost: {\n    total: number\n    currency: string\n    totalMessages: number\n    averageCostPerMessage: number\n  }\n  channelCosts: Array<{\n    channel: string\n    cost: number\n    messageCount: number\n    averageCostPerMessage: number\n    percentageOfTotal: number\n  }>\n  quotaUsage: {\n    monthlyLimit: number\n    monthToDateUsage: number\n    remainingQuota: number\n    usagePercentage: number\n    daysRemainingInMonth: number\n    dailyAverageUsage: number\n    projectedMonthEndUsage: number\n    isOverQuota: boolean\n    isNearQuota: boolean\n  }\n}\n\n// API client configuration\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5284'\n\nconst apiClient = axios.create({\n  baseURL: `${API_BASE_URL}/api`,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\n// Add auth token interceptor\napiClient.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token')\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`\n  }\n  return config\n})\n\n// Query functions\nasync function fetchAnalyticsSummary(filters: AnalyticsFilters): Promise<AnalyticsSummaryResponse> {\n  const params = new URLSearchParams({\n    scope: filters.scope,\n    from: filters.from.toISOString(),\n    to: filters.to.toISOString(),\n  })\n\n  if (filters.campaignId) {\n    params.append('campaignId', filters.campaignId)\n  }\n\n  if (filters.channels.length > 0) {\n    params.append('channels', filters.channels.join(','))\n  }\n\n  if (filters.abGroup) {\n    params.append('abGroup', filters.abGroup)\n  }\n\n  const { data } = await apiClient.get<AnalyticsSummaryResponse>(`/analytics/summary?${params}`)\n  return data\n}\n\nasync function fetchTimeSeriesMetrics(filters: AnalyticsFilters): Promise<TimeSeriesResponse> {\n  const params = new URLSearchParams({\n    scope: filters.scope,\n    from: filters.from.toISOString(),\n    to: filters.to.toISOString(),\n    interval: filters.interval,\n    timezone: filters.timezone,\n  })\n\n  if (filters.campaignId) {\n    params.append('campaignId', filters.campaignId)\n  }\n\n  if (filters.channels.length > 0) {\n    params.append('channels', filters.channels.join(','))\n  }\n\n  const { data } = await apiClient.get<TimeSeriesResponse>(`/analytics/timeseries?${params}`)\n  return data\n}\n\nasync function fetchFunnelMetrics(filters: AnalyticsFilters): Promise<FunnelResponse> {\n  const params = new URLSearchParams({\n    scope: filters.scope,\n    from: filters.from.toISOString(),\n    to: filters.to.toISOString(),\n    conversionModel: filters.conversionModel,\n  })\n\n  if (filters.campaignId) {\n    params.append('campaignId', filters.campaignId)\n  }\n\n  if (filters.channels.length > 0) {\n    params.append('channels', filters.channels.join(','))\n  }\n\n  if (filters.abGroup) {\n    params.append('abGroup', filters.abGroup)\n  }\n\n  const { data } = await apiClient.get<FunnelResponse>(`/analytics/funnel?${params}`)\n  return data\n}\n\nasync function fetchCostQuota(filters: AnalyticsFilters): Promise<CostQuotaResponse> {\n  const params = new URLSearchParams({\n    scope: filters.scope,\n  })\n\n  if (filters.campaignId) {\n    params.append('campaignId', filters.campaignId)\n  }\n\n  if (filters.channels.length > 0) {\n    params.append('channels', filters.channels.join(','))\n  }\n\n  const { data } = await apiClient.get<CostQuotaResponse>(`/analytics/cost-quota?${params}`)\n  return data\n}\n\n// React Query hooks\nexport function useAnalyticsSummary(filters: AnalyticsFilters) {\n  return useQuery({\n    queryKey: ['analytics', 'summary', filters],\n    queryFn: () => fetchAnalyticsSummary(filters),\n    staleTime: 1000 * 30, // 30 seconds\n    gcTime: 1000 * 60 * 5, // 5 minutes\n    refetchInterval: 1000 * 60, // 1 minute\n    retry: 2,\n    retryDelay: 1000\n  })\n}\n\nexport function useTimeSeriesMetrics(filters: AnalyticsFilters) {\n  return useQuery({\n    queryKey: ['analytics', 'timeseries', filters],\n    queryFn: () => fetchTimeSeriesMetrics(filters),\n    staleTime: 1000 * 30, // 30 seconds\n    gcTime: 1000 * 60 * 5, // 5 minutes\n    refetchInterval: 1000 * 60, // 1 minute\n    retry: 2,\n    retryDelay: 1000\n  })\n}\n\nexport function useFunnelMetrics(filters: AnalyticsFilters) {\n  return useQuery({\n    queryKey: ['analytics', 'funnel', filters],\n    queryFn: () => fetchFunnelMetrics(filters),\n    staleTime: 1000 * 60, // 1 minute\n    gcTime: 1000 * 60 * 5, // 5 minutes\n    refetchInterval: 1000 * 60 * 2, // 2 minutes\n    retry: 2,\n    retryDelay: 1000\n  })\n}\n\nexport function useCostQuota(filters: AnalyticsFilters) {\n  return useQuery({\n    queryKey: ['analytics', 'cost-quota', filters],\n    queryFn: () => fetchCostQuota(filters),\n    staleTime: 1000 * 60 * 5, // 5 minutes\n    gcTime: 1000 * 60 * 10, // 10 minutes\n    refetchInterval: 1000 * 60 * 5, // 5 minutes\n    retry: 2,\n    retryDelay: 1000\n  })\n}\n\n// Utility hook for manual refresh\nexport function useAnalyticsRefresh() {\n  const queryClient = useQueryClient()\n\n  const refreshAll = () => {\n    queryClient.invalidateQueries({ queryKey: ['analytics'] })\n  }\n\n  const refreshSummary = () => {\n    queryClient.invalidateQueries({ queryKey: ['analytics', 'summary'] })\n  }\n\n  const refreshTimeSeries = () => {\n    queryClient.invalidateQueries({ queryKey: ['analytics', 'timeseries'] })\n  }\n\n  const refreshFunnel = () => {\n    queryClient.invalidateQueries({ queryKey: ['analytics', 'funnel'] })\n  }\n\n  const refreshCostQuota = () => {\n    queryClient.invalidateQueries({ queryKey: ['analytics', 'cost-quota'] })\n  }\n\n  return {\n    refreshAll,\n    refreshSummary,\n    refreshTimeSeries,\n    refreshFunnel,\n    refreshCostQuota\n  }\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3280, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3286, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/components/analytics/winner-badge.tsx"],"sourcesContent":["'use client'\n\nimport React from 'react'\nimport { Badge } from '@/components/ui/badge'\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'\nimport { Crown, TrendingUp, TrendingDown, Minus, Info } from 'lucide-react'\nimport { cn } from '@/lib/utils'\nimport { formatPValue, getSignificanceLabel, type StatisticalTest } from '@/lib/utils/ab-test-statistics'\n\ninterface WinnerBadgeProps {\n  /** Statistical test result */\n  test: StatisticalTest\n  /** Type of winner badge */\n  variant?: 'winner' | 'loser' | 'neutral' | 'control'\n  /** Show detailed tooltip */\n  showTooltip?: boolean\n  /** Additional CSS classes */\n  className?: string\n  /** Size variant */\n  size?: 'sm' | 'md' | 'lg'\n  /** Icon variant */\n  iconVariant?: 'crown' | 'trend' | 'none'\n}\n\nexport function WinnerBadge({ \n  test, \n  variant = 'neutral',\n  showTooltip = true,\n  className,\n  size = 'md',\n  iconVariant = 'trend'\n}: WinnerBadgeProps) {\n  const significance = getSignificanceLabel(test.pValue)\n  const isSignificant = test.isSignificant\n  const lift = test.liftPercentage\n\n  // Determine badge variant and styling\n  const getBadgeConfig = () => {\n    if (variant === 'control') {\n      return {\n        variant: 'outline' as const,\n        text: 'Control',\n        icon: null,\n        className: 'border-blue-300 text-blue-700 bg-blue-50'\n      }\n    }\n\n    if (!isSignificant) {\n      return {\n        variant: 'outline' as const,\n        text: 'Not Significant',\n        icon: iconVariant === 'trend' ? <Minus className=\"h-3 w-3\" /> : null,\n        className: 'border-gray-300 text-gray-600 bg-gray-50'\n      }\n    }\n\n    if (lift > 0) {\n      const winnerText = variant === 'winner' ? 'Winner' : 'Positive'\n      return {\n        variant: 'outline' as const,\n        text: winnerText,\n        icon: iconVariant === 'crown' ? <Crown className=\"h-3 w-3\" /> : \n              iconVariant === 'trend' ? <TrendingUp className=\"h-3 w-3\" /> : null,\n        className: cn(\n          'border-green-300 text-green-700 bg-green-50',\n          significance.level === 'highly-significant' && 'border-green-400 text-green-800 bg-green-100'\n        )\n      }\n    } else {\n      const loserText = variant === 'loser' ? 'Loser' : 'Negative'\n      return {\n        variant: 'outline' as const,\n        text: loserText,\n        icon: iconVariant === 'crown' ? null : \n              iconVariant === 'trend' ? <TrendingDown className=\"h-3 w-3\" /> : null,\n        className: cn(\n          'border-red-300 text-red-700 bg-red-50',\n          significance.level === 'highly-significant' && 'border-red-400 text-red-800 bg-red-100'\n        )\n      }\n    }\n  }\n\n  const badgeConfig = getBadgeConfig()\n\n  // Size-based styling\n  const sizeClasses = {\n    sm: 'text-xs px-1.5 py-0.5 h-5',\n    md: 'text-xs px-2 py-1 h-6',\n    lg: 'text-sm px-3 py-1.5 h-8'\n  }\n\n  const tooltipContent = (\n    <div className=\"space-y-2 max-w-xs\">\n      <div className=\"font-medium text-sm\">\n        {significance.label} Result\n      </div>\n      \n      <div className=\"space-y-1 text-xs\">\n        <div className=\"flex justify-between\">\n          <span>P-value:</span>\n          <span className=\"font-mono\">{formatPValue(test.pValue)}</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span>Z-score:</span>\n          <span className=\"font-mono\">{test.zScore.toFixed(3)}</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span>Lift:</span>\n          <span className={cn(\n            \"font-mono\",\n            lift > 0 ? \"text-green-600\" : lift < 0 ? \"text-red-600\" : \"text-gray-500\"\n          )}>\n            {lift >= 0 ? '+' : ''}{lift.toFixed(1)}%\n          </span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span>Confidence:</span>\n          <span className=\"font-mono\">{(test.confidenceLevel * 100).toFixed(0)}%</span>\n        </div>\n      </div>\n\n      {isSignificant && (\n        <div className=\"pt-1 border-t border-gray-200\">\n          <div className=\"text-xs text-gray-600\">\n            This result is statistically significant at the {(test.confidenceLevel * 100).toFixed(0)}% confidence level.\n          </div>\n        </div>\n      )}\n\n      {!isSignificant && (\n        <div className=\"pt-1 border-t border-gray-200\">\n          <div className=\"text-xs text-gray-600\">\n            This difference could be due to random variation. Consider running the test longer.\n          </div>\n        </div>\n      )}\n    </div>\n  )\n\n  const badge = (\n    <Badge\n      variant={badgeConfig.variant}\n      className={cn(\n        'inline-flex items-center gap-1',\n        sizeClasses[size],\n        badgeConfig.className,\n        className\n      )}\n    >\n      {badgeConfig.icon}\n      <span>{badgeConfig.text}</span>\n      {isSignificant && (\n        <div className=\"flex items-center\">\n          <div className=\"w-1 h-1 rounded-full bg-current ml-1\" />\n        </div>\n      )}\n    </Badge>\n  )\n\n  if (!showTooltip) {\n    return badge\n  }\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          {badge}\n        </TooltipTrigger>\n        <TooltipContent side=\"top\" align=\"center\" sideOffset={4}>\n          {tooltipContent}\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  )\n}\n\n// Convenience components for specific use cases\nexport function WinnerCrown({ test, showTooltip = true, className }: Pick<WinnerBadgeProps, 'test' | 'showTooltip' | 'className'>) {\n  if (!test.isSignificant || test.lift <= 0) return null\n  \n  return (\n    <WinnerBadge \n      test={test}\n      variant=\"winner\"\n      iconVariant=\"crown\"\n      showTooltip={showTooltip}\n      className={className}\n    />\n  )\n}\n\nexport function SignificanceBadge({ test, showTooltip = true, className }: Pick<WinnerBadgeProps, 'test' | 'showTooltip' | 'className'>) {\n  return (\n    <WinnerBadge \n      test={test}\n      variant={test.lift > 0 ? 'winner' : test.lift < 0 ? 'loser' : 'neutral'}\n      iconVariant=\"trend\"\n      showTooltip={showTooltip}\n      className={className}\n    />\n  )\n}\n\nexport function ControlBadge({ className }: { className?: string }) {\n  const dummyTest: StatisticalTest = {\n    zScore: 0,\n    pValue: 1,\n    isSignificant: false,\n    confidenceLevel: 0.95,\n    lift: 0,\n    liftPercentage: 0\n  }\n\n  return (\n    <WinnerBadge \n      test={dummyTest}\n      variant=\"control\"\n      iconVariant=\"none\"\n      showTooltip={false}\n      className={className}\n    />\n  )\n}\n\n// Compact inline badge for tables\nexport function InlineSignificanceBadge({ \n  test, \n  showLabel = false,\n  className \n}: { \n  test: StatisticalTest\n  showLabel?: boolean\n  className?: string \n}) {\n  if (!test.isSignificant) return null\n\n  const significance = getSignificanceLabel(test.pValue)\n  \n  return (\n    <Badge \n      variant=\"outline\" \n      className={cn(\n        'text-xs px-1 py-0 h-4',\n        significance.color,\n        className\n      )}\n    >\n      ✓{showLabel && ` ${significance.label}`}\n    </Badge>\n  )\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3692, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3698, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/components/analytics/ab-test-performance-widget.tsx"],"sourcesContent":["'use client'\n\nimport { useMemo } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { AlertCircle, RefreshCw, TrendingUp, TrendingDown, Minus } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Progress } from '@/components/ui/progress'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { cn } from '@/lib/utils'\nimport { useAnalyticsSummary } from '@/hooks/use-analytics-api'\nimport type { AnalyticsFilters } from '@/hooks/use-analytics-filters'\nimport { AbVariantTable } from '@/components/analytics/ab-variant-table'\nimport { AbTestBarChart } from '@/components/analytics/ab-test-bar-chart'\nimport { WinnerCrown, SignificanceBadge } from '@/components/analytics/winner-badge'\nimport type { AbVariant } from '@/lib/utils/ab-test-statistics'\n\ninterface AbTestConfig {\n  variants: Array<{\n    id: string\n    name: string\n    allocation: number\n    description?: string\n  }>\n  testType: 'message_content' | 'send_time' | 'channel_mix' | 'targeting'\n  startDate: string\n  endDate?: string\n}\n\ninterface AbTestPerformanceWidgetProps {\n  campaignId: string\n  filters: AnalyticsFilters\n  config: AbTestConfig\n}\n\ninterface VariantPerformance {\n  variantId: string\n  name: string\n  allocation: number\n  metrics: {\n    sent: number\n    delivered: number\n    opened: number\n    clicked: number\n    deliveryRate: number\n    openRate: number\n    clickRate: number\n    conversionRate: number\n  }\n  trend: {\n    direction: 'up' | 'down' | 'neutral'\n    value: number\n    isStatisticallySignificant: boolean\n  }\n}\n\nfunction calculateStatisticalSignificance(variant1: VariantPerformance, variant2: VariantPerformance): boolean {\n  // Simplified statistical significance calculation\n  // In production, this would use proper statistical tests like chi-square or t-test\n  const diff = Math.abs(variant1.metrics.conversionRate - variant2.metrics.conversionRate)\n  const pooledStdError = Math.sqrt(\n    (variant1.metrics.conversionRate * (1 - variant1.metrics.conversionRate)) / variant1.metrics.sent +\n    (variant2.metrics.conversionRate * (1 - variant2.metrics.conversionRate)) / variant2.metrics.sent\n  )\n  const zScore = diff / pooledStdError\n  return zScore > 1.96 // 95% confidence level\n}\n\nexport function AbTestPerformanceWidget({ campaignId, filters, config }: AbTestPerformanceWidgetProps) {\n  // Get overall campaign data\n  const { data, isLoading, error, refetch } = useAnalyticsSummary(filters)\n\n  // Calculate variant-specific performance (mock data for now)\n  // In production, this would come from a separate A/B test analytics endpoint\n  const variantPerformance = useMemo((): VariantPerformance[] => {\n    if (!data || !config.variants) return []\n\n    return config.variants.map((variant, index) => {\n      // Mock calculation - distribute metrics based on allocation\n      const baseMetrics = {\n        sent: Math.round((data.kpi.sent * variant.allocation) / 100),\n        delivered: Math.round((data.kpi.delivered * variant.allocation) / 100),\n        opened: Math.round((data.kpi.opened * variant.allocation) / 100),\n        clicked: Math.round((data.kpi.clicked * variant.allocation) / 100)\n      }\n\n      // Add some variance to simulate different performance\n      const performanceMultiplier = 1 + (Math.sin(index) * 0.1) // -10% to +10% variance\n      const adjustedMetrics = {\n        ...baseMetrics,\n        delivered: Math.round(baseMetrics.delivered * performanceMultiplier),\n        opened: Math.round(baseMetrics.opened * performanceMultiplier * 1.05),\n        clicked: Math.round(baseMetrics.clicked * performanceMultiplier * 1.1)\n      }\n\n      const deliveryRate = adjustedMetrics.sent > 0 ? adjustedMetrics.delivered / adjustedMetrics.sent : 0\n      const openRate = adjustedMetrics.delivered > 0 ? adjustedMetrics.opened / adjustedMetrics.delivered : 0\n      const clickRate = adjustedMetrics.delivered > 0 ? adjustedMetrics.clicked / adjustedMetrics.delivered : 0\n      const conversionRate = adjustedMetrics.sent > 0 ? adjustedMetrics.clicked / adjustedMetrics.sent : 0\n\n      return {\n        variantId: variant.id,\n        name: variant.name,\n        allocation: variant.allocation,\n        metrics: {\n          ...adjustedMetrics,\n          deliveryRate,\n          openRate,\n          clickRate,\n          conversionRate\n        },\n        trend: {\n          direction: performanceMultiplier > 1 ? 'up' : performanceMultiplier < 1 ? 'down' : 'neutral',\n          value: Math.abs((performanceMultiplier - 1) * 100),\n          isStatisticallySignificant: Math.abs(performanceMultiplier - 1) > 0.05\n        }\n      }\n    })\n  }, [data, config.variants])\n\n  // Convert to AbVariant format for new components\n  const abVariants = useMemo((): AbVariant[] => {\n    return variantPerformance.map(variant => ({\n      name: variant.name,\n      sent: variant.metrics.sent,\n      delivered: variant.metrics.delivered,\n      opened: variant.metrics.opened,\n      clicked: variant.metrics.clicked,\n      conversions: variant.metrics.clicked, // Using clicks as conversions for demo\n      deliveryRate: variant.metrics.deliveryRate,\n      openRate: variant.metrics.openRate,\n      clickRate: variant.metrics.clickRate,\n      conversionRate: variant.metrics.conversionRate\n    }))\n  }, [variantPerformance])\n\n  // Find best and worst performing variants\n  const bestVariant = variantPerformance.reduce((best, current) => \n    current.metrics.conversionRate > best.metrics.conversionRate ? current : best, \n    variantPerformance[0]\n  )\n  \n  const worstVariant = variantPerformance.reduce((worst, current) => \n    current.metrics.conversionRate < worst.metrics.conversionRate ? current : worst, \n    variantPerformance[0]\n  )\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <div className=\"w-5 h-5 bg-gray-200 rounded animate-pulse\" />\n            <Skeleton className=\"h-6 w-40\" />\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {Array.from({ length: 3 }).map((_, i) => (\n            <div key={i} className=\"flex items-center justify-between p-4 border rounded-lg\">\n              <div className=\"space-y-2\">\n                <Skeleton className=\"h-4 w-20\" />\n                <Skeleton className=\"h-3 w-32\" />\n              </div>\n              <Skeleton className=\"h-8 w-16\" />\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>A/B Test Performance</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Alert className=\"border-red-200\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription className=\"flex items-center justify-between\">\n              <span>Failed to load A/B test data. Please try again.</span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => refetch()}\n                className=\"ml-2\"\n              >\n                <RefreshCw className=\"h-3 w-3 mr-1\" />\n                Retry\n              </Button>\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (!variantPerformance.length) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>A/B Test Performance</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <p>No A/B test data available</p>\n            <p className=\"text-sm\">Test may not have started or no variants configured</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-5 h-5 bg-blue-100 rounded flex items-center justify-center\">\n              <span className=\"text-blue-600 text-xs font-bold\">AB</span>\n            </div>\n            <span>A/B Test Performance</span>\n          </div>\n          <Badge variant=\"outline\" className=\"capitalize\">\n            {config.testType.replace('_', ' ')}\n          </Badge>\n        </CardTitle>\n        <p className=\"text-sm text-muted-foreground\">\n          Comparing {variantPerformance.length} variants • \n          {config.endDate ? 'Completed' : 'Running'} test\n        </p>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* A/B Test Visualization Tabs */}\n        <Tabs defaultValue=\"overview\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"table\">Detailed Table</TabsTrigger>\n            <TabsTrigger value=\"chart\">Visual Chart</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"overview\" className=\"space-y-4\">\n            {/* Original Variant Performance Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {variantPerformance.map((variant) => {\n            const TrendIcon = variant.trend.direction === 'up' ? TrendingUp : \n                             variant.trend.direction === 'down' ? TrendingDown : Minus\n            \n            const isWinner = variant.variantId === bestVariant?.variantId\n            const isLoser = variant.variantId === worstVariant?.variantId && variantPerformance.length > 1\n\n            return (\n              <Card \n                key={variant.variantId} \n                className={cn(\n                  \"relative\",\n                  isWinner && \"border-green-200 bg-green-50\",\n                  isLoser && \"border-red-200 bg-red-50\"\n                )}\n              >\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-base\">{variant.name}</CardTitle>\n                    <div className=\"flex items-center space-x-1\">\n                      {isWinner && variant.trend.isStatisticallySignificant && (\n                        <WinnerCrown \n                          test={{\n                            zScore: 2.1,\n                            pValue: 0.03,\n                            isSignificant: true,\n                            confidenceLevel: 0.95,\n                            lift: variant.trend.value,\n                            liftPercentage: variant.trend.value\n                          }}\n                          showTooltip={true}\n                        />\n                      )}\n                      {variant.trend.isStatisticallySignificant && (\n                        <SignificanceBadge \n                          test={{\n                            zScore: variant.trend.direction === 'up' ? 2.1 : -2.1,\n                            pValue: 0.03,\n                            isSignificant: true,\n                            confidenceLevel: 0.95,\n                            lift: variant.trend.direction === 'up' ? variant.trend.value : -variant.trend.value,\n                            liftPercentage: variant.trend.direction === 'up' ? variant.trend.value : -variant.trend.value\n                          }}\n                          showTooltip={true}\n                        />\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Progress value={variant.allocation} className=\"flex-1 h-2\" />\n                    <span className=\"text-xs text-muted-foreground\">{variant.allocation}%</span>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"pt-0 space-y-3\">\n                  {/* Key Metrics */}\n                  <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                    <div>\n                      <span className=\"text-muted-foreground\">Conversion</span>\n                      <div className=\"font-semibold text-lg\">\n                        {(variant.metrics.conversionRate * 100).toFixed(1)}%\n                      </div>\n                    </div>\n                    <div>\n                      <span className=\"text-muted-foreground\">Clicks</span>\n                      <div className=\"font-semibold text-lg\">\n                        {variant.metrics.clicked.toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Additional Metrics */}\n                  <div className=\"space-y-1 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Delivery Rate:</span>\n                      <span>{(variant.metrics.deliveryRate * 100).toFixed(1)}%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Open Rate:</span>\n                      <span>{(variant.metrics.openRate * 100).toFixed(1)}%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Click Rate:</span>\n                      <span>{(variant.metrics.clickRate * 100).toFixed(1)}%</span>\n                    </div>\n                  </div>\n\n                  {/* Trend Indicator */}\n                  {variant.trend.direction !== 'neutral' && (\n                    <div className=\"flex items-center justify-between pt-2 border-t\">\n                      <span className=\"text-xs text-muted-foreground\">Trend</span>\n                      <div className={cn(\n                        \"flex items-center space-x-1 text-xs\",\n                        variant.trend.direction === 'up' ? \"text-green-600\" : \"text-red-600\"\n                      )}>\n                        <TrendIcon className=\"h-3 w-3\" />\n                        <span>{variant.trend.value.toFixed(1)}%</span>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )\n          })}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"table\" className=\"space-y-4\">\n            <AbVariantTable \n              variants={abVariants}\n              primaryMetric=\"clickRate\"\n              isLoading={isLoading}\n              error={error}\n              onRefresh={() => refetch()}\n            />\n          </TabsContent>\n\n          <TabsContent value=\"chart\" className=\"space-y-4\">\n            <AbTestBarChart \n              variants={abVariants}\n              primaryMetric=\"clickRate\"\n              metric=\"all\"\n              showLift={true}\n              height={400}\n              isLoading={isLoading}\n              error={error}\n              onRefresh={() => refetch()}\n            />\n          </TabsContent>\n        </Tabs>\n\n        {/* Test Summary */}\n        <div className=\"border-t pt-4\">\n          <h4 className=\"font-medium mb-3\">Test Summary</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n            <div>\n              <span className=\"text-muted-foreground\">Best Performer:</span>\n              <div className=\"font-medium text-green-600\">\n                {bestVariant?.name} ({(bestVariant?.metrics.conversionRate * 100).toFixed(1)}%)\n              </div>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Performance Gap:</span>\n              <div className=\"font-medium\">\n                {bestVariant && worstVariant ? \n                  `${((bestVariant.metrics.conversionRate - worstVariant.metrics.conversionRate) * 100).toFixed(1)}%` :\n                  'N/A'\n                }\n              </div>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Statistical Significance:</span>\n              <div className=\"font-medium\">\n                {bestVariant && worstVariant && calculateStatisticalSignificance(bestVariant, worstVariant) ? \n                  <span className=\"text-green-600\">Significant</span> : \n                  <span className=\"text-yellow-600\">Inconclusive</span>\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Recommendations */}\n        {bestVariant && worstVariant && calculateStatisticalSignificance(bestVariant, worstVariant) && (\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <h4 className=\"font-medium text-blue-800 mb-2\">Recommendations</h4>\n            <ul className=\"text-sm text-blue-700 space-y-1\">\n              <li>• Consider promoting {bestVariant.name} to 100% traffic allocation</li>\n              <li>• Performance difference is statistically significant</li>\n              <li>• Test can be concluded with confidence</li>\n            </ul>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4722, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4728, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/hooks/use-analytics-filters.ts"],"sourcesContent":["'use client'\n\nimport { useState, useCallback, useEffect } from 'react'\nimport { useRouter, useSearchParams } from 'next/navigation'\nimport { subDays, format } from 'date-fns'\n\nexport interface AnalyticsFilters {\n  scope: 'global' | 'campaign'\n  campaignId?: string\n  from: Date\n  to: Date\n  channels: string[]\n  interval: '5m' | '1h' | '1d'\n  timezone: string\n  abGroup?: string\n  conversionModel: 'stepwise' | 'absolute'\n}\n\nconst DEFAULT_FILTERS: AnalyticsFilters = {\n  scope: 'global',\n  from: subDays(new Date(), 30),\n  to: new Date(),\n  channels: [],\n  interval: '1h',\n  timezone: 'Asia/Seoul',\n  conversionModel: 'stepwise'\n}\n\nexport function useAnalyticsFilters() {\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  \n  // Initialize filters from URL params or defaults\n  const [filters, setFilters] = useState<AnalyticsFilters>(() => {\n    const params = new URLSearchParams(searchParams?.toString())\n    \n    return {\n      scope: (params.get('scope') as 'global' | 'campaign') || DEFAULT_FILTERS.scope,\n      campaignId: params.get('campaignId') || undefined,\n      from: params.get('from') ? new Date(params.get('from')!) : DEFAULT_FILTERS.from,\n      to: params.get('to') ? new Date(params.get('to')!) : DEFAULT_FILTERS.to,\n      channels: params.get('channels')?.split(',').filter(Boolean) || DEFAULT_FILTERS.channels,\n      interval: (params.get('interval') as '5m' | '1h' | '1d') || DEFAULT_FILTERS.interval,\n      timezone: params.get('timezone') || DEFAULT_FILTERS.timezone,\n      abGroup: params.get('abGroup') || undefined,\n      conversionModel: (params.get('conversionModel') as 'stepwise' | 'absolute') || DEFAULT_FILTERS.conversionModel\n    }\n  })\n\n  // Update URL when filters change\n  const updateUrl = useCallback((newFilters: AnalyticsFilters) => {\n    const params = new URLSearchParams()\n    \n    if (newFilters.scope !== DEFAULT_FILTERS.scope) {\n      params.set('scope', newFilters.scope)\n    }\n    \n    if (newFilters.campaignId) {\n      params.set('campaignId', newFilters.campaignId)\n    }\n    \n    if (newFilters.from.toISOString() !== DEFAULT_FILTERS.from.toISOString()) {\n      params.set('from', format(newFilters.from, 'yyyy-MM-dd'))\n    }\n    \n    if (newFilters.to.toISOString() !== DEFAULT_FILTERS.to.toISOString()) {\n      params.set('to', format(newFilters.to, 'yyyy-MM-dd'))\n    }\n    \n    if (newFilters.channels.length > 0) {\n      params.set('channels', newFilters.channels.join(','))\n    }\n    \n    if (newFilters.interval !== DEFAULT_FILTERS.interval) {\n      params.set('interval', newFilters.interval)\n    }\n    \n    if (newFilters.timezone !== DEFAULT_FILTERS.timezone) {\n      params.set('timezone', newFilters.timezone)\n    }\n    \n    if (newFilters.abGroup) {\n      params.set('abGroup', newFilters.abGroup)\n    }\n    \n    if (newFilters.conversionModel !== DEFAULT_FILTERS.conversionModel) {\n      params.set('conversionModel', newFilters.conversionModel)\n    }\n\n    const newUrl = `${window.location.pathname}?${params.toString()}`\n    router.replace(newUrl, { scroll: false })\n  }, [router])\n\n  // Update a single filter\n  const updateFilter = useCallback(<K extends keyof AnalyticsFilters>(\n    key: K,\n    value: AnalyticsFilters[K]\n  ) => {\n    const newFilters = { ...filters, [key]: value }\n    setFilters(newFilters)\n    updateUrl(newFilters)\n  }, [filters, updateUrl])\n\n  // Update multiple filters at once\n  const updateFilters = useCallback((updates: Partial<AnalyticsFilters>) => {\n    const newFilters = { ...filters, ...updates }\n    setFilters(newFilters)\n    updateUrl(newFilters)\n  }, [filters, updateUrl])\n\n  // Reset to defaults\n  const resetFilters = useCallback(() => {\n    setFilters(DEFAULT_FILTERS)\n    updateUrl(DEFAULT_FILTERS)\n  }, [updateUrl])\n\n  // Preset date ranges\n  const setDateRange = useCallback((range: 'today' | '7d' | '30d' | '90d' | 'custom') => {\n    const now = new Date()\n    let from: Date\n    let to: Date = now\n\n    switch (range) {\n      case 'today':\n        from = new Date(now.getFullYear(), now.getMonth(), now.getDate())\n        break\n      case '7d':\n        from = subDays(now, 7)\n        break\n      case '30d':\n        from = subDays(now, 30)\n        break\n      case '90d':\n        from = subDays(now, 90)\n        break\n      default:\n        return // For 'custom', don't change dates\n    }\n\n    updateFilters({ from, to })\n  }, [updateFilters])\n\n  // Validate filters\n  const isValidDateRange = filters.from <= filters.to\n  const maxRangeDays = filters.interval === '5m' ? 1 : filters.interval === '1h' ? 30 : 365\n  const isValidRangeLength = (filters.to.getTime() - filters.from.getTime()) / (1000 * 60 * 60 * 24) <= maxRangeDays\n\n  // Generate cache keys for react-query\n  const getCacheKey = useCallback((endpoint: string, additionalParams?: Record<string, any>) => {\n    return [\n      endpoint,\n      {\n        scope: filters.scope,\n        campaignId: filters.campaignId,\n        from: filters.from.toISOString(),\n        to: filters.to.toISOString(),\n        channels: filters.channels,\n        interval: filters.interval,\n        timezone: filters.timezone,\n        abGroup: filters.abGroup,\n        conversionModel: filters.conversionModel,\n        ...additionalParams\n      }\n    ]\n  }, [filters])\n\n  return {\n    filters,\n    updateFilter,\n    updateFilters,\n    resetFilters,\n    setDateRange,\n    getCacheKey,\n    validation: {\n      isValidDateRange,\n      isValidRangeLength,\n      maxRangeDays\n    }\n  }\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4925, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4931, "column": 0}, "map": {"version":3,"sources":["file:///home/junseoklee/ClaudeCode/Productivity/frontend/frontend/src/app/analytics/ab-tests/page.tsx"],"sourcesContent":["'use client'\n\nimport { Suspense, useState } from 'react'\nimport { Card } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Badge } from '@/components/ui/badge'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport { AnalyticsFiltersBar } from '@/components/analytics/analytics-filters-bar'\nimport { ExportMenu } from '@/components/analytics/export-menu'\nimport { KpiCard, KpiCardGroup } from '@/components/analytics/kpi-card'\nimport { AbTestBarChart } from '@/components/analytics/ab-test-bar-chart'\nimport { AbVariantTable } from '@/components/analytics/ab-variant-table'\nimport { AbTestPerformanceWidget } from '@/components/analytics/ab-test-performance-widget'\nimport { useAnalyticsFilters } from '@/hooks/use-analytics-filters'\nimport { useAnalyticsSummary } from '@/hooks/use-analytics-api'\nimport { \n  Zap, \n  Target, \n  TrendingUp, \n  Users, \n  BarChart3, \n  Crown,\n  CheckCircle,\n  XCircle,\n  Clock,\n  AlertTriangle\n} from 'lucide-react'\nimport { cn } from '@/lib/utils'\nimport type { AbVariant } from '@/lib/utils/ab-test-statistics'\n\ninterface AbTest {\n  id: string\n  name: string\n  description: string\n  status: 'draft' | 'running' | 'completed' | 'paused'\n  testType: 'message_content' | 'send_time' | 'channel_mix' | 'targeting'\n  startDate: string\n  endDate?: string\n  campaignId: string\n  campaignName: string\n  variants: Array<{\n    id: string\n    name: string\n    allocation: number\n    description?: string\n  }>\n  primaryMetric: 'delivery' | 'openRate' | 'clickRate' | 'conversion'\n  winner?: string\n  significance: number\n  confidence: number\n}\n\nconst mockAbTests: AbTest[] = [\n  {\n    id: 'test-1',\n    name: '메시지 내용 A/B 테스트',\n    description: '공식적 vs 친근한 톤의 메시지 효과 비교',\n    status: 'running',\n    testType: 'message_content',\n    startDate: '2024-03-01',\n    campaignId: 'camp-1',\n    campaignName: '2024 지방선거 유권자 접촉',\n    variants: [\n      { id: 'v1', name: '공식 메시지', allocation: 50 },\n      { id: 'v2', name: '친근 메시지', allocation: 50 }\n    ],\n    primaryMetric: 'clickRate',\n    significance: 0.023,\n    confidence: 95\n  },\n  {\n    id: 'test-2',\n    name: '발송 시간 최적화',\n    description: '오전 vs 오후 발송 시간의 참여율 비교',\n    status: 'completed',\n    testType: 'send_time',\n    startDate: '2024-02-15',\n    endDate: '2024-02-28',\n    campaignId: 'camp-2',\n    campaignName: '정책 설명회 초대',\n    variants: [\n      { id: 'v1', name: '오전 9시', allocation: 50 },\n      { id: 'v2', name: '오후 2시', allocation: 50 }\n    ],\n    primaryMetric: 'openRate',\n    winner: 'v1',\n    significance: 0.001,\n    confidence: 99\n  },\n  {\n    id: 'test-3',\n    name: '채널 믹스 실험',\n    description: 'SMS vs KakaoTalk 채널 효과성 비교',\n    status: 'completed',\n    testType: 'channel_mix',\n    startDate: '2024-01-20',\n    endDate: '2024-02-10',\n    campaignId: 'camp-3',\n    campaignName: '청년층 정책 홍보',\n    variants: [\n      { id: 'v1', name: 'SMS 전용', allocation: 50 },\n      { id: 'v2', name: 'KakaoTalk 전용', allocation: 50 }\n    ],\n    primaryMetric: 'conversion',\n    winner: 'v2',\n    significance: 0.008,\n    confidence: 99\n  }\n]\n\nconst mockVariantData: { [testId: string]: AbVariant[] } = {\n  'test-1': [\n    {\n      name: '공식 메시지',\n      sent: 7500,\n      delivered: 7312,\n      opened: 5834,\n      clicked: 1423,\n      conversions: 1423,\n      deliveryRate: 0.975,\n      openRate: 0.798,\n      clickRate: 0.244,\n      conversionRate: 0.190\n    },\n    {\n      name: '친근 메시지',\n      sent: 7500,\n      delivered: 7285,\n      opened: 6234,\n      clicked: 1876,\n      conversions: 1876,\n      deliveryRate: 0.971,\n      openRate: 0.856,\n      clickRate: 0.301,\n      conversionRate: 0.250\n    }\n  ],\n  'test-2': [\n    {\n      name: '오전 9시',\n      sent: 4375,\n      delivered: 4312,\n      opened: 3785,\n      clicked: 1156,\n      conversions: 1156,\n      deliveryRate: 0.986,\n      openRate: 0.878,\n      clickRate: 0.305,\n      conversionRate: 0.264\n    },\n    {\n      name: '오후 2시',\n      sent: 4375,\n      delivered: 4298,\n      opened: 3234,\n      clicked: 987,\n      conversions: 987,\n      deliveryRate: 0.982,\n      openRate: 0.752,\n      clickRate: 0.305,\n      conversionRate: 0.225\n    }\n  ],\n  'test-3': [\n    {\n      name: 'SMS 전용',\n      sent: 11050,\n      delivered: 10734,\n      opened: 9423,\n      clicked: 2234,\n      conversions: 2234,\n      deliveryRate: 0.971,\n      openRate: 0.878,\n      clickRate: 0.237,\n      conversionRate: 0.202\n    },\n    {\n      name: 'KakaoTalk 전용',\n      sent: 11050,\n      delivered: 10876,\n      opened: 9645,\n      clicked: 2834,\n      conversions: 2834,\n      deliveryRate: 0.984,\n      openRate: 0.887,\n      clickRate: 0.294,\n      conversionRate: 0.256\n    }\n  ]\n}\n\nexport default function AbTestsAnalyticsPage() {\n  const { filters, updateFilter, resetFilters } = useAnalyticsFilters()\n  const [selectedTest, setSelectedTest] = useState<string>('all')\n  const [statusFilter, setStatusFilter] = useState<string>('all')\n\n  const filteredTests = mockAbTests.filter(test => {\n    if (statusFilter !== 'all' && test.status !== statusFilter) return false\n    return true\n  })\n\n  const activeTest = filteredTests.find(test => test.id === selectedTest)\n  const activeVariants = selectedTest !== 'all' ? mockVariantData[selectedTest] || [] : []\n\n  // Calculate summary metrics\n  const runningTests = mockAbTests.filter(test => test.status === 'running').length\n  const completedTests = mockAbTests.filter(test => test.status === 'completed').length\n  const significantTests = mockAbTests.filter(test => test.significance < 0.05).length\n  const averageUplift = mockAbTests\n    .filter(test => test.status === 'completed' && test.winner)\n    .reduce((sum, test) => sum + 12.5, 0) / \n    Math.max(mockAbTests.filter(test => test.status === 'completed' && test.winner).length, 1)\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'running': return <Clock className=\"h-4 w-4 text-blue-500\" />\n      case 'completed': return <CheckCircle className=\"h-4 w-4 text-green-500\" />\n      case 'paused': return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n      default: return <XCircle className=\"h-4 w-4 text-gray-500\" />\n    }\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'running': return 'bg-blue-50 text-blue-700 border-blue-200'\n      case 'completed': return 'bg-green-50 text-green-700 border-green-200'\n      case 'paused': return 'bg-yellow-50 text-yellow-700 border-yellow-200'\n      default: return 'bg-gray-50 text-gray-700 border-gray-200'\n    }\n  }\n\n  const getTestTypeLabel = (type: string) => {\n    switch (type) {\n      case 'message_content': return '메시지 내용'\n      case 'send_time': return '발송 시간'\n      case 'channel_mix': return '채널 믹스'\n      case 'targeting': return '타겟팅'\n      default: return type\n    }\n  }\n\n  return (\n    <div className=\"container mx-auto py-6 space-y-6\">\n      {/* Page Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">A/B 테스트 분석</h1>\n          <p className=\"text-muted-foreground\">\n            A/B 테스트 결과 및 통계적 유의성 분석\n          </p>\n        </div>\n        <div className=\"flex items-center gap-3\">\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-40\">\n              <SelectValue placeholder=\"상태 필터\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">전체 상태</SelectItem>\n              <SelectItem value=\"running\">진행중</SelectItem>\n              <SelectItem value=\"completed\">완료</SelectItem>\n              <SelectItem value=\"paused\">일시중지</SelectItem>\n              <SelectItem value=\"draft\">초안</SelectItem>\n            </SelectContent>\n          </Select>\n          <Select value={selectedTest} onValueChange={setSelectedTest}>\n            <SelectTrigger className=\"w-64\">\n              <SelectValue placeholder=\"테스트 선택\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">전체 테스트</SelectItem>\n              {filteredTests.map((test) => (\n                <SelectItem key={test.id} value={test.id}>\n                  <div className=\"flex items-center gap-2\">\n                    {getStatusIcon(test.status)}\n                    <span>{test.name}</span>\n                  </div>\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <ExportMenu filters={filters} />\n        </div>\n      </div>\n\n      {/* Test Info Banner */}\n      {activeTest && (\n        <Card className={cn(\"p-6\", getStatusColor(activeTest.status))}>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-xl font-semibold mb-2\">{activeTest.name}</h2>\n              <p className=\"text-sm mb-3\">{activeTest.description}</p>\n              <div className=\"flex items-center gap-4 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  {getStatusIcon(activeTest.status)}\n                  <span className=\"capitalize\">{activeTest.status === 'running' ? '진행중' : activeTest.status === 'completed' ? '완료' : activeTest.status}</span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">유형:</span> {getTestTypeLabel(activeTest.testType)}\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">기간:</span> \n                  {activeTest.startDate} {activeTest.endDate && ` ~ ${activeTest.endDate}`}\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">변형:</span> {activeTest.variants.length}개\n                </div>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              {activeTest.winner && (\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Crown className=\"h-5 w-5 text-yellow-500\" />\n                  <span className=\"font-medium\">승리 변형: {activeTest.variants.find(v => v.id === activeTest.winner)?.name}</span>\n                </div>\n              )}\n              {activeTest.significance < 0.05 && (\n                <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                  통계적 유의성 확인 (p &lt; 0.05)\n                </Badge>\n              )}\n            </div>\n          </div>\n        </Card>\n      )}\n\n      {/* KPI Cards */}\n      <KpiCardGroup>\n        <KpiCard\n          label=\"진행중인 테스트\"\n          value={runningTests}\n          color=\"baseline\"\n          icon={Clock}\n          formatter={(val) => val.toString()}\n        />\n        <KpiCard\n          label=\"완료된 테스트\"\n          value={completedTests}\n          color=\"conversion\"\n          icon={CheckCircle}\n          formatter={(val) => val.toString()}\n        />\n        <KpiCard\n          label=\"유의한 결과\"\n          value={significantTests}\n          color=\"open\"\n          icon={TrendingUp}\n          formatter={(val) => val.toString()}\n        />\n        <KpiCard\n          label=\"평균 개선율\"\n          value={`${averageUplift.toFixed(1)}%`}\n          deltaPct={3.2}\n          color=\"click\"\n          icon={Target}\n        />\n      </KpiCardGroup>\n\n      {selectedTest === 'all' ? (\n        <>\n          {/* All Tests Overview */}\n          <Card>\n            <div className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">A/B 테스트 현황</h3>\n              <div className=\"space-y-4\">\n                {filteredTests.map((test) => (\n                  <div key={test.id} className=\"p-4 border rounded-lg hover:bg-gray-50\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <h4 className=\"font-medium\">{test.name}</h4>\n                          <Badge variant=\"outline\" className={cn(\"text-xs\", getStatusColor(test.status))}>\n                            {test.status === 'running' ? '진행중' : test.status === 'completed' ? '완료' : test.status}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {getTestTypeLabel(test.testType)}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground mb-2\">{test.description}</p>\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          <span>캠페인: {test.campaignName}</span>\n                          <span>변형: {test.variants.length}개</span>\n                          <span>주 지표: {test.primaryMetric}</span>\n                          <span>{test.startDate} {test.endDate && `~ ${test.endDate}`}</span>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        {test.winner && (\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <Crown className=\"h-4 w-4 text-yellow-500\" />\n                            <span className=\"text-sm font-medium\">\n                              {test.variants.find(v => v.id === test.winner)?.name}\n                            </span>\n                          </div>\n                        )}\n                        {test.significance < 0.05 && (\n                          <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200 text-xs\">\n                            유의함 (p={test.significance.toFixed(3)})\n                          </Badge>\n                        )}\n                        <div className=\"mt-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => setSelectedTest(test.id)}\n                          >\n                            자세히 보기\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </Card>\n\n          {/* Test Performance Summary Chart */}\n          <Card>\n            <div className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">테스트별 성과 비교</h3>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-medium mb-3\">완료된 테스트 결과</h4>\n                  <div className=\"space-y-3\">\n                    {mockAbTests.filter(test => test.status === 'completed').map((test) => {\n                      const testVariants = mockVariantData[test.id] || []\n                      if (testVariants.length < 2) return null\n                      \n                      const winner = testVariants[1] // Assume second variant won\n                      const control = testVariants[0]\n                      const uplift = ((winner.clickRate - control.clickRate) / control.clickRate) * 100\n                      \n                      return (\n                        <div key={test.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n                          <div>\n                            <div className=\"font-medium text-sm\">{test.name}</div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {getTestTypeLabel(test.testType)}\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"font-medium text-green-600\">+{uplift.toFixed(1)}%</div>\n                            <div className=\"text-xs text-muted-foreground\">개선율</div>\n                          </div>\n                        </div>\n                      )\n                    })}\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"font-medium mb-3\">테스트 유형별 분포</h4>\n                  <div className=\"space-y-3\">\n                    {['message_content', 'send_time', 'channel_mix', 'targeting'].map((type) => {\n                      const count = mockAbTests.filter(test => test.testType === type).length\n                      const percentage = (count / mockAbTests.length) * 100\n                      \n                      return (\n                        <div key={type} className=\"flex items-center justify-between\">\n                          <span className=\"text-sm\">{getTestTypeLabel(type)}</span>\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"w-16 h-2 bg-gray-200 rounded-full\">\n                              <div \n                                className=\"h-2 bg-blue-500 rounded-full\" \n                                style={{ width: `${percentage}%` }}\n                              ></div>\n                            </div>\n                            <span className=\"text-sm font-medium w-8\">{count}</span>\n                          </div>\n                        </div>\n                      )\n                    })}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </>\n      ) : (\n        <>\n          {/* Individual Test Analysis */}\n          {activeVariants.length > 0 && (\n            <>\n              {/* A/B Test Bar Chart */}\n              <Card>\n                <div className=\"p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4\">변형 성과 비교</h3>\n                  <Suspense fallback={<ChartSkeleton className=\"h-96\" />}>\n                    <AbTestBarChart\n                      variants={activeVariants}\n                      primaryMetric=\"clickRate\"\n                      metric=\"all\"\n                      showLift={true}\n                      height={400}\n                    />\n                  </Suspense>\n                </div>\n              </Card>\n\n              {/* Detailed Variant Table */}\n              <Suspense fallback={<TableSkeleton />}>\n                <AbVariantTable\n                  variants={activeVariants}\n                  primaryMetric=\"clickRate\"\n                />\n              </Suspense>\n\n              {/* Test Performance Widget */}\n              {activeTest && (\n                <Suspense fallback={<WidgetSkeleton />}>\n                  <AbTestPerformanceWidget\n                    campaignId={activeTest.campaignId}\n                    filters={filters}\n                    config={{\n                      variants: activeTest.variants,\n                      testType: activeTest.testType,\n                      startDate: activeTest.startDate,\n                      endDate: activeTest.endDate\n                    }}\n                  />\n                </Suspense>\n              )}\n            </>\n          )}\n\n          {/* Test Recommendations */}\n          {activeTest && activeTest.status === 'completed' && activeTest.winner && (\n            <Card className=\"bg-green-50 border-green-200\">\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-green-800 mb-4\">추천 사항</h3>\n                <div className=\"space-y-3 text-green-700\">\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"h-5 w-5\" />\n                    <span className=\"font-medium\">\n                      '{activeTest.variants.find(v => v.id === activeTest.winner)?.name}' 변형을 전체 캠페인에 적용하세요\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Target className=\"h-5 w-5\" />\n                    <span>\n                      통계적으로 유의한 결과로 신뢰할 수 있는 개선이 확인되었습니다\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"h-5 w-5\" />\n                    <span>\n                      예상 개선율: +{((activeVariants[1]?.clickRate || 0) - (activeVariants[0]?.clickRate || 0) / (activeVariants[0]?.clickRate || 1) * 100).toFixed(1)}%\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          )}\n        </>\n      )}\n    </div>\n  )\n}\n\n// Loading Skeletons\nfunction ChartSkeleton({ className }: { className?: string }) {\n  return <Skeleton className={className || \"h-64 w-full\"} />\n}\n\nfunction TableSkeleton() {\n  return (\n    <Card>\n      <div className=\"p-6 space-y-4\">\n        <Skeleton className=\"h-6 w-48\" />\n        {Array.from({ length: 4 }).map((_, i) => (\n          <div key={i} className=\"flex gap-4\">\n            <Skeleton className=\"h-4 w-32\" />\n            <Skeleton className=\"h-4 w-20\" />\n            <Skeleton className=\"h-4 w-20\" />\n            <Skeleton className=\"h-4 w-20\" />\n            <Skeleton className=\"h-4 w-20\" />\n          </div>\n        ))}\n      </div>\n    </Card>\n  )\n}\n\nfunction WidgetSkeleton() {\n  return (\n    <Card>\n      <div className=\"p-6 space-y-4\">\n        <Skeleton className=\"h-6 w-48\" />\n        <div className=\"grid grid-cols-3 gap-4\">\n          {Array.from({ length: 3 }).map((_, i) => (\n            <div key={i} className=\"space-y-2\">\n              <Skeleton className=\"h-20 w-full\" />\n              <Skeleton className=\"h-4 w-full\" />\n            </div>\n          ))}\n        </div>\n      </div>\n    </Card>\n  )\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 6412, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}