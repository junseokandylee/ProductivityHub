// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProductivityHub.Api.Data;

#nullable disable

namespace ProductivityHub.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250901104603_AddRLSAndCrypto")]
    partial class AddRLSAndCrypto
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProductivityHub.Api.Models.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<int>("FailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("failed_count");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_content");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("PriorityChannels")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("priority_channels");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_at");

                    b.Property<int>("SentCount")
                        .HasColumnType("integer")
                        .HasColumnName("sent_count");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<int>("SuccessCount")
                        .HasColumnType("integer")
                        .HasColumnName("success_count");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int>("TotalRecipients")
                        .HasColumnType("integer")
                        .HasColumnName("total_recipients");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("TenantId");

                    b.ToTable("campaigns");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.CampaignContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid")
                        .HasColumnName("campaign_id");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered_at");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("error_message");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CampaignId", "ContactId")
                        .IsUnique()
                        .HasDatabaseName("IX_CampaignContacts_CampaignId_ContactId");

                    b.ToTable("campaign_contacts");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("KakaoId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("kakao_id");

                    b.Property<string>("Metadata")
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("tags");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "Email")
                        .HasDatabaseName("IX_Contacts_TenantId_Email");

                    b.HasIndex("TenantId", "KakaoId")
                        .HasDatabaseName("IX_Contacts_TenantId_KakaoId");

                    b.HasIndex("TenantId", "Phone")
                        .HasDatabaseName("IX_Contacts_TenantId_Phone");

                    b.ToTable("contacts");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.MessageHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid")
                        .HasColumnName("campaign_id");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("channel");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<decimal?>("Cost")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("cost");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered_at");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("error_message");

                    b.Property<string>("ExternalMessageId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("external_message_id");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_content");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("Channel");

                    b.HasIndex("ContactId");

                    b.HasIndex("Status");

                    b.ToTable("message_history");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("tenants");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Campaign", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Tenant", "Tenant")
                        .WithMany("Campaigns")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.CampaignContact", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Campaign", "Campaign")
                        .WithMany("CampaignContacts")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductivityHub.Api.Models.Contact", "Contact")
                        .WithMany("CampaignContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Contact", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Tenant", "Tenant")
                        .WithMany("Contacts")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.MessageHistory", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Campaign", "Campaign")
                        .WithMany("MessageHistories")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductivityHub.Api.Models.Contact", "Contact")
                        .WithMany("MessageHistories")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.User", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Campaign", b =>
                {
                    b.Navigation("CampaignContacts");

                    b.Navigation("MessageHistories");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Contact", b =>
                {
                    b.Navigation("CampaignContacts");

                    b.Navigation("MessageHistories");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Tenant", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("Contacts");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
