// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProductivityHub.Api.Data;

#nullable disable

namespace ProductivityHub.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250901141111_ContactSystemAndEncryption")]
    partial class ContactSystemAndEncryption
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProductivityHub.Api.Models.AlertPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CampaignId")
                        .HasColumnType("uuid")
                        .HasColumnName("campaign_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<int>("EvaluationWindowSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("evaluation_window_seconds");

                    b.Property<decimal>("FailureRateThreshold")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)")
                        .HasColumnName("failure_rate_threshold");

                    b.Property<int>("MinConsecutiveBuckets")
                        .HasColumnType("integer")
                        .HasColumnName("min_consecutive_buckets");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "CampaignId")
                        .IsUnique()
                        .HasDatabaseName("IX_AlertPolicy_TenantId_CampaignId");

                    b.ToTable("alert_policy");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.AlertState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid")
                        .HasColumnName("campaign_id");

                    b.Property<int>("ConsecutiveBreaches")
                        .HasColumnType("integer")
                        .HasColumnName("consecutive_breaches");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("LastClearedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_cleared_at");

                    b.Property<DateTime>("LastEvaluatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_evaluated_at");

                    b.Property<decimal>("LastFailureRate")
                        .HasPrecision(5, 4)
                        .HasColumnType("numeric(5,4)")
                        .HasColumnName("last_failure_rate");

                    b.Property<DateTime?>("LastTriggeredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_triggered_at");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<bool>("Triggered")
                        .HasColumnType("boolean")
                        .HasColumnName("triggered");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "CampaignId")
                        .IsUnique()
                        .HasDatabaseName("IX_AlertState_TenantId_CampaignId");

                    b.HasIndex("Triggered", "LastEvaluatedAt")
                        .HasDatabaseName("IX_AlertState_Triggered_LastEvaluated");

                    b.ToTable("alert_state");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<decimal>("EstimatedCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("estimated_cost");

                    b.Property<int>("EstimatedRecipients")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_recipients");

                    b.Property<int>("FailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("failed_count");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("message_body");

                    b.Property<string>("MessageTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("message_title");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("QuotaUsed")
                        .HasColumnType("integer")
                        .HasColumnName("quota_used");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_at");

                    b.Property<int>("SentCount")
                        .HasColumnType("integer")
                        .HasColumnName("sent_count");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("SuccessCount")
                        .HasColumnType("integer")
                        .HasColumnName("success_count");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<string>("Variables")
                        .HasColumnType("text")
                        .HasColumnName("variables");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Status");

                    b.HasIndex("TenantId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("campaigns");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.CampaignAudience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid")
                        .HasColumnName("campaign_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FilterJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("filter_json");

                    b.Property<string>("GroupIds")
                        .HasColumnType("jsonb")
                        .HasColumnName("group_ids");

                    b.Property<bool>("IncludeAll")
                        .HasColumnType("boolean")
                        .HasColumnName("include_all");

                    b.Property<string>("SegmentIds")
                        .HasColumnType("jsonb")
                        .HasColumnName("segment_ids");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId")
                        .IsUnique();

                    b.ToTable("campaign_audience");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.CampaignChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid")
                        .HasColumnName("campaign_id");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("channel");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("FallbackEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("fallback_enabled");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("order_index");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CampaignId", "OrderIndex")
                        .IsUnique()
                        .HasDatabaseName("IX_CampaignChannels_CampaignId_OrderIndex");

                    b.ToTable("campaign_channels");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.CampaignContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid")
                        .HasColumnName("campaign_id");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered_at");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("error_message");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CampaignId", "ContactId")
                        .IsUnique()
                        .HasDatabaseName("IX_CampaignContacts_CampaignId_ContactId");

                    b.ToTable("campaign_contacts");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.CampaignMetrics", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid")
                        .HasColumnName("campaign_id");

                    b.Property<long>("ClickTotal")
                        .HasColumnType("bigint")
                        .HasColumnName("click_total");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("DeliveredTotal")
                        .HasColumnType("bigint")
                        .HasColumnName("delivered_total");

                    b.Property<long>("FailedTotal")
                        .HasColumnType("bigint")
                        .HasColumnName("failed_total");

                    b.Property<long>("KakaoDelivered")
                        .HasColumnType("bigint")
                        .HasColumnName("kakao_delivered");

                    b.Property<long>("KakaoFailed")
                        .HasColumnType("bigint")
                        .HasColumnName("kakao_failed");

                    b.Property<long>("KakaoSent")
                        .HasColumnType("bigint")
                        .HasColumnName("kakao_sent");

                    b.Property<long>("OpenTotal")
                        .HasColumnType("bigint")
                        .HasColumnName("open_total");

                    b.Property<long>("SentTotal")
                        .HasColumnType("bigint")
                        .HasColumnName("sent_total");

                    b.Property<long>("SmsDelivered")
                        .HasColumnType("bigint")
                        .HasColumnName("sms_delivered");

                    b.Property<long>("SmsFailed")
                        .HasColumnType("bigint")
                        .HasColumnName("sms_failed");

                    b.Property<long>("SmsSent")
                        .HasColumnType("bigint")
                        .HasColumnName("sms_sent");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("CampaignId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UpdatedAt");

                    b.ToTable("campaign_metrics");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.CampaignMetricsMinute", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid")
                        .HasColumnName("campaign_id");

                    b.Property<DateTime>("BucketMinute")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bucket_minute");

                    b.Property<long>("Attempted")
                        .HasColumnType("bigint")
                        .HasColumnName("attempted");

                    b.Property<long>("Click")
                        .HasColumnType("bigint")
                        .HasColumnName("click");

                    b.Property<long>("Delivered")
                        .HasColumnType("bigint")
                        .HasColumnName("delivered");

                    b.Property<long>("Failed")
                        .HasColumnType("bigint")
                        .HasColumnName("failed");

                    b.Property<long>("Open")
                        .HasColumnType("bigint")
                        .HasColumnName("open");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("CampaignId", "BucketMinute");

                    b.HasIndex("BucketMinute");

                    b.HasIndex("TenantId");

                    b.HasIndex("CampaignId", "BucketMinute")
                        .HasDatabaseName("IX_CampaignMetricsMinute_CampaignId_BucketMinute");

                    b.ToTable("campaign_metrics_minute");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("EmailEncrypted")
                        .HasColumnType("bytea")
                        .HasColumnName("email_enc");

                    b.Property<byte[]>("EmailHash")
                        .HasColumnType("bytea")
                        .HasColumnName("email_hash");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<byte[]>("KakaoIdEncrypted")
                        .HasColumnType("bytea")
                        .HasColumnName("kakao_enc");

                    b.Property<byte[]>("KakaoIdHash")
                        .HasColumnType("bytea")
                        .HasColumnName("kakao_hash");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<byte[]>("PhoneEncrypted")
                        .HasColumnType("bytea")
                        .HasColumnName("phone_enc");

                    b.Property<byte[]>("PhoneHash")
                        .HasColumnType("bytea")
                        .HasColumnName("phone_hash");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "EmailHash")
                        .HasDatabaseName("IX_Contacts_TenantId_EmailHash");

                    b.HasIndex("TenantId", "KakaoIdHash")
                        .HasDatabaseName("IX_Contacts_TenantId_KakaoIdHash");

                    b.HasIndex("TenantId", "PhoneHash")
                        .HasDatabaseName("IX_Contacts_TenantId_PhoneHash");

                    b.HasIndex("TenantId", "CreatedAt", "Id")
                        .HasDatabaseName("IX_Contacts_TenantId_CreatedAt_Id");

                    b.ToTable("contacts");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.ContactGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_ContactGroups_TenantId_Name");

                    b.ToTable("contact_groups");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.ContactGroupMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("GroupId");

                    b.HasIndex("GroupId", "ContactId")
                        .IsUnique()
                        .HasDatabaseName("IX_ContactGroupMembers_GroupId_ContactId");

                    b.ToTable("contact_group_members");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.ContactHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ip_address");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<string>("Payload")
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_agent");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.HasIndex("ContactId", "OccurredAt")
                        .HasDatabaseName("IX_ContactHistory_ContactId_OccurredAt");

                    b.ToTable("contact_history");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.ContactSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("FilterJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("filter_json");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_ContactSegments_TenantId_Name");

                    b.ToTable("contact_segments");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.ContactTag", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("ContactId", "TagId");

                    b.HasIndex("ContactId");

                    b.HasIndex("TagId");

                    b.HasIndex("TenantId");

                    b.ToTable("contact_tags");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.MessageHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid")
                        .HasColumnName("campaign_id");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("channel");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid")
                        .HasColumnName("contact_id");

                    b.Property<decimal?>("Cost")
                        .HasPrecision(10, 4)
                        .HasColumnType("numeric(10,4)")
                        .HasColumnName("cost");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivered_at");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("error_message");

                    b.Property<string>("ExternalMessageId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("external_message_id");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_content");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("Channel");

                    b.HasIndex("ContactId");

                    b.HasIndex("Status");

                    b.ToTable("message_history");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Tags_TenantId_Name");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("tenants");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("role");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.AlertPolicy", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.AlertState", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Campaign", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductivityHub.Api.Models.Tenant", "Tenant")
                        .WithMany("Campaigns")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductivityHub.Api.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Tenant");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.CampaignAudience", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Campaign", "Campaign")
                        .WithOne("Audience")
                        .HasForeignKey("ProductivityHub.Api.Models.CampaignAudience", "CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.CampaignChannel", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Campaign", "Campaign")
                        .WithMany("Channels")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.CampaignContact", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Campaign", "Campaign")
                        .WithMany("CampaignContacts")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductivityHub.Api.Models.Contact", "Contact")
                        .WithMany("CampaignContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.CampaignMetrics", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Campaign", "Campaign")
                        .WithOne()
                        .HasForeignKey("ProductivityHub.Api.Models.CampaignMetrics", "CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductivityHub.Api.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.CampaignMetricsMinute", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductivityHub.Api.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Contact", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Tenant", "Tenant")
                        .WithMany("Contacts")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.ContactGroup", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.ContactGroupMember", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductivityHub.Api.Models.ContactGroup", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.ContactHistory", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Contact", "Contact")
                        .WithMany("ContactHistory")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductivityHub.Api.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductivityHub.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Contact");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.ContactSegment", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.ContactTag", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Contact", "Contact")
                        .WithMany("ContactTags")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductivityHub.Api.Models.Tag", "Tag")
                        .WithMany("ContactTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductivityHub.Api.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Tag");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.MessageHistory", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Campaign", "Campaign")
                        .WithMany("MessageHistories")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductivityHub.Api.Models.Contact", "Contact")
                        .WithMany("MessageHistories")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Tag", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.User", b =>
                {
                    b.HasOne("ProductivityHub.Api.Models.Tenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Campaign", b =>
                {
                    b.Navigation("Audience");

                    b.Navigation("CampaignContacts");

                    b.Navigation("Channels");

                    b.Navigation("MessageHistories");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Contact", b =>
                {
                    b.Navigation("CampaignContacts");

                    b.Navigation("ContactHistory");

                    b.Navigation("ContactTags");

                    b.Navigation("MessageHistories");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.ContactGroup", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Tag", b =>
                {
                    b.Navigation("ContactTags");
                });

            modelBuilder.Entity("ProductivityHub.Api.Models.Tenant", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("Contacts");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
